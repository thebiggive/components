/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface BiggiveButton {
        /**
          * Colour Scheme
         */
        "colourScheme": string;
        /**
          * Text
         */
        "label": string;
        /**
          * URL
         */
        "url": string;
    }
    interface BiggiveCallToAction {
        /**
          * Colour Scheme
         */
        "colourScheme": string;
        /**
          * Main title
         */
        "mainTitle": string;
        /**
          * Main title colour
         */
        "mainTitleColour": string;
        /**
          * Primary button Colour Scheme
         */
        "primaryButtonColourScheme": string;
        /**
          * Primary button Label
         */
        "primaryButtonLabel": string;
        /**
          * Primary button Url
         */
        "primaryButtonUrl": string;
        /**
          * Secondary button Colour Scheme
         */
        "secondaryButtonColourScheme": string;
        /**
          * Secondary button Label
         */
        "secondaryButtonLabel": string;
        /**
          * Secondary button Url
         */
        "secondaryButtonUrl": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Slug colour
         */
        "slugColour": string;
        /**
          * Subtitle
         */
        "subtitle": string;
        /**
          * Subtitle colour
         */
        "subtitleColour": string;
        /**
          * Teaser
         */
        "teaser": string;
        /**
          * Teaser colour
         */
        "teaserColour": string;
    }
    interface BiggiveCampaignCard {
        /**
          * Full URL of a banner image.
         */
        "banner": string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle": string;
        /**
          * e.g. "Match Funded".
         */
        "campaignType": string;
        /**
          * e.g. 'GBP'.
         */
        "currencyCode": string;
        /**
          * Donate button label
         */
        "donateButtonLabel": string;
        /**
          * Donate button url
         */
        "donateButtonUrl": string;
        /**
          * Match funds remaining.
         */
        "matchFundsRemaining": number;
        /**
          * More information button label
         */
        "moreInfoButtonLabel": string;
        /**
          * More information button url
         */
        "moreInfoButtonUrl": string;
        /**
          * Display name of the charity or non-profit.
         */
        "organisationName": string;
        /**
          * Total the campaign has raised so far including matching but excluding any tax relief, in major unit of currency e.g. pounds GBP.
         */
        "totalFundsRaised": number;
    }
    interface BiggiveCampaignCardFilterGrid {
        /**
          * Defines the text on the search button
         */
        "buttonText": string;
        /**
          * Intro
         */
        "intro": string;
        /**
          * Defines the text displayed as the placeholder in the input field before the user types anything
         */
        "placeholderText": string;
    }
    interface BiggiveDropdown {
    }
    interface BiggiveFooter {
    }
    interface BiggiveForm {
    }
    interface BiggiveFormFieldSelect {
    }
    interface BiggiveGraphic {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme": string;
        /**
          * Button Label
         */
        "buttonLabel": string;
        /**
          * Button Url
         */
        "buttonUrl": string;
        /**
          * Colour Scheme
         */
        "colourScheme": string;
        /**
          * Full URL of a graphic.
         */
        "graphicUrl": string;
        /**
          * Video title
         */
        "mainTitle": string;
        /**
          * Slug colour
         */
        "mainTitleColour": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Slug colour
         */
        "slugColour": string;
        /**
          * Introductory teaser text
         */
        "teaser": string;
        /**
          * Teaser colour
         */
        "teaserColour": string;
    }
    interface BiggiveGrid {
        /**
          * Column count
         */
        "columnCount": number;
        /**
          * Column gap
         */
        "columnGap": number;
    }
    interface BiggiveHeader {
    }
    interface BiggiveHeroImage {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme": string;
        /**
          * Button Label
         */
        "buttonLabel": string;
        /**
          * Button Url
         */
        "buttonUrl": string;
        /**
          * Colour Scheme
         */
        "colourScheme": string;
        /**
          * Full URL of a logo image.
         */
        "logo": string;
        /**
          * Full URL of a main hero image.
         */
        "mainImage": string;
        /**
          * Hero image title, typically the page.
         */
        "mainTitle": string;
        /**
          * Main title colour
         */
        "mainTitleColour": string;
        /**
          * Header slug
         */
        "slug": string;
        /**
          * Header slug colour
         */
        "slugColour": string;
        /**
          * Introductory teaser text
         */
        "teaser": string;
        /**
          * Teaser colour
         */
        "teaserColour": string;
    }
    interface BiggiveIcon {
    }
    interface BiggiveProgressBar {
        /**
          * Colour Scheme
         */
        "colourScheme": string;
        /**
          * Text
         */
        "counter": number;
    }
    interface BiggiveQuote {
        /**
          * Attribution text
         */
        "attribution": string;
        /**
          * Colour Scheme
         */
        "colourScheme": string;
        /**
          * Quote text
         */
        "quote": string;
    }
    interface BiggiveSearch {
        /**
          * Defines the text on the search button
         */
        "buttonText": string;
        /**
          * Defines the text displayed as the placeholder in the input field before the user types anything
         */
        "placeholderText": string;
    }
    interface BiggiveSection {
        /**
          * Colour scheme
         */
        "colourScheme": string;
        /**
          * Section style bottom
         */
        "sectionStyleBottom": string;
        /**
          * Section style top
         */
        "sectionStyleTop": string;
        /**
          * Space after
         */
        "spaceAfter": number;
    }
    interface BiggiveSocialIcon {
        /**
          * service
         */
        "service": string;
        /**
          * Url
         */
        "url": string;
    }
    interface BiggiveTextInput {
    }
    interface BiggiveTotalizer {
        /**
          * e.g. 'GBP'.
         */
        "currencyCode": string;
        /**
          * Include GiftAid
         */
        "includingGiftAid": boolean;
        /**
          * Primary banner colour
         */
        "primaryColour": string;
        /**
          * Primary text colour
         */
        "primaryTextColour": string;
        /**
          * Secondary banner colour
         */
        "secondaryColour": string;
        /**
          * Secondary text colour
         */
        "secondaryTextColour": string;
        /**
          * Total match funds.
         */
        "totalMatchFunds": number;
        /**
          * Total raised.
         */
        "totalRaised": number;
    }
    interface BiggiveVideo {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme": string;
        /**
          * Button Label
         */
        "buttonLabel": string;
        /**
          * Button Url
         */
        "buttonUrl": string;
        /**
          * Colour Scheme
         */
        "colourScheme": string;
        /**
          * Video title
         */
        "mainTitle": string;
        /**
          * Slug colour
         */
        "mainTitleColour": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Slug colour
         */
        "slugColour": string;
        /**
          * Introductory teaser text
         */
        "teaser": string;
        /**
          * Teaser colour
         */
        "teaserColour": string;
        /**
          * Full URL of a video.
         */
        "videoUrl": string;
    }
}
export interface BiggiveCampaignCardFilterGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveCampaignCardFilterGridElement;
}
export interface BiggiveSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveSearchElement;
}
declare global {
    interface HTMLBiggiveButtonElement extends Components.BiggiveButton, HTMLStencilElement {
    }
    var HTMLBiggiveButtonElement: {
        prototype: HTMLBiggiveButtonElement;
        new (): HTMLBiggiveButtonElement;
    };
    interface HTMLBiggiveCallToActionElement extends Components.BiggiveCallToAction, HTMLStencilElement {
    }
    var HTMLBiggiveCallToActionElement: {
        prototype: HTMLBiggiveCallToActionElement;
        new (): HTMLBiggiveCallToActionElement;
    };
    interface HTMLBiggiveCampaignCardElement extends Components.BiggiveCampaignCard, HTMLStencilElement {
    }
    var HTMLBiggiveCampaignCardElement: {
        prototype: HTMLBiggiveCampaignCardElement;
        new (): HTMLBiggiveCampaignCardElement;
    };
    interface HTMLBiggiveCampaignCardFilterGridElement extends Components.BiggiveCampaignCardFilterGrid, HTMLStencilElement {
    }
    var HTMLBiggiveCampaignCardFilterGridElement: {
        prototype: HTMLBiggiveCampaignCardFilterGridElement;
        new (): HTMLBiggiveCampaignCardFilterGridElement;
    };
    interface HTMLBiggiveDropdownElement extends Components.BiggiveDropdown, HTMLStencilElement {
    }
    var HTMLBiggiveDropdownElement: {
        prototype: HTMLBiggiveDropdownElement;
        new (): HTMLBiggiveDropdownElement;
    };
    interface HTMLBiggiveFooterElement extends Components.BiggiveFooter, HTMLStencilElement {
    }
    var HTMLBiggiveFooterElement: {
        prototype: HTMLBiggiveFooterElement;
        new (): HTMLBiggiveFooterElement;
    };
    interface HTMLBiggiveFormElement extends Components.BiggiveForm, HTMLStencilElement {
    }
    var HTMLBiggiveFormElement: {
        prototype: HTMLBiggiveFormElement;
        new (): HTMLBiggiveFormElement;
    };
    interface HTMLBiggiveFormFieldSelectElement extends Components.BiggiveFormFieldSelect, HTMLStencilElement {
    }
    var HTMLBiggiveFormFieldSelectElement: {
        prototype: HTMLBiggiveFormFieldSelectElement;
        new (): HTMLBiggiveFormFieldSelectElement;
    };
    interface HTMLBiggiveGraphicElement extends Components.BiggiveGraphic, HTMLStencilElement {
    }
    var HTMLBiggiveGraphicElement: {
        prototype: HTMLBiggiveGraphicElement;
        new (): HTMLBiggiveGraphicElement;
    };
    interface HTMLBiggiveGridElement extends Components.BiggiveGrid, HTMLStencilElement {
    }
    var HTMLBiggiveGridElement: {
        prototype: HTMLBiggiveGridElement;
        new (): HTMLBiggiveGridElement;
    };
    interface HTMLBiggiveHeaderElement extends Components.BiggiveHeader, HTMLStencilElement {
    }
    var HTMLBiggiveHeaderElement: {
        prototype: HTMLBiggiveHeaderElement;
        new (): HTMLBiggiveHeaderElement;
    };
    interface HTMLBiggiveHeroImageElement extends Components.BiggiveHeroImage, HTMLStencilElement {
    }
    var HTMLBiggiveHeroImageElement: {
        prototype: HTMLBiggiveHeroImageElement;
        new (): HTMLBiggiveHeroImageElement;
    };
    interface HTMLBiggiveIconElement extends Components.BiggiveIcon, HTMLStencilElement {
    }
    var HTMLBiggiveIconElement: {
        prototype: HTMLBiggiveIconElement;
        new (): HTMLBiggiveIconElement;
    };
    interface HTMLBiggiveProgressBarElement extends Components.BiggiveProgressBar, HTMLStencilElement {
    }
    var HTMLBiggiveProgressBarElement: {
        prototype: HTMLBiggiveProgressBarElement;
        new (): HTMLBiggiveProgressBarElement;
    };
    interface HTMLBiggiveQuoteElement extends Components.BiggiveQuote, HTMLStencilElement {
    }
    var HTMLBiggiveQuoteElement: {
        prototype: HTMLBiggiveQuoteElement;
        new (): HTMLBiggiveQuoteElement;
    };
    interface HTMLBiggiveSearchElement extends Components.BiggiveSearch, HTMLStencilElement {
    }
    var HTMLBiggiveSearchElement: {
        prototype: HTMLBiggiveSearchElement;
        new (): HTMLBiggiveSearchElement;
    };
    interface HTMLBiggiveSectionElement extends Components.BiggiveSection, HTMLStencilElement {
    }
    var HTMLBiggiveSectionElement: {
        prototype: HTMLBiggiveSectionElement;
        new (): HTMLBiggiveSectionElement;
    };
    interface HTMLBiggiveSocialIconElement extends Components.BiggiveSocialIcon, HTMLStencilElement {
    }
    var HTMLBiggiveSocialIconElement: {
        prototype: HTMLBiggiveSocialIconElement;
        new (): HTMLBiggiveSocialIconElement;
    };
    interface HTMLBiggiveTextInputElement extends Components.BiggiveTextInput, HTMLStencilElement {
    }
    var HTMLBiggiveTextInputElement: {
        prototype: HTMLBiggiveTextInputElement;
        new (): HTMLBiggiveTextInputElement;
    };
    interface HTMLBiggiveTotalizerElement extends Components.BiggiveTotalizer, HTMLStencilElement {
    }
    var HTMLBiggiveTotalizerElement: {
        prototype: HTMLBiggiveTotalizerElement;
        new (): HTMLBiggiveTotalizerElement;
    };
    interface HTMLBiggiveVideoElement extends Components.BiggiveVideo, HTMLStencilElement {
    }
    var HTMLBiggiveVideoElement: {
        prototype: HTMLBiggiveVideoElement;
        new (): HTMLBiggiveVideoElement;
    };
    interface HTMLElementTagNameMap {
        "biggive-button": HTMLBiggiveButtonElement;
        "biggive-call-to-action": HTMLBiggiveCallToActionElement;
        "biggive-campaign-card": HTMLBiggiveCampaignCardElement;
        "biggive-campaign-card-filter-grid": HTMLBiggiveCampaignCardFilterGridElement;
        "biggive-dropdown": HTMLBiggiveDropdownElement;
        "biggive-footer": HTMLBiggiveFooterElement;
        "biggive-form": HTMLBiggiveFormElement;
        "biggive-form-field-select": HTMLBiggiveFormFieldSelectElement;
        "biggive-graphic": HTMLBiggiveGraphicElement;
        "biggive-grid": HTMLBiggiveGridElement;
        "biggive-header": HTMLBiggiveHeaderElement;
        "biggive-hero-image": HTMLBiggiveHeroImageElement;
        "biggive-icon": HTMLBiggiveIconElement;
        "biggive-progress-bar": HTMLBiggiveProgressBarElement;
        "biggive-quote": HTMLBiggiveQuoteElement;
        "biggive-search": HTMLBiggiveSearchElement;
        "biggive-section": HTMLBiggiveSectionElement;
        "biggive-social-icon": HTMLBiggiveSocialIconElement;
        "biggive-text-input": HTMLBiggiveTextInputElement;
        "biggive-totalizer": HTMLBiggiveTotalizerElement;
        "biggive-video": HTMLBiggiveVideoElement;
    }
}
declare namespace LocalJSX {
    interface BiggiveButton {
        /**
          * Colour Scheme
         */
        "colourScheme"?: string;
        /**
          * Text
         */
        "label"?: string;
        /**
          * URL
         */
        "url"?: string;
    }
    interface BiggiveCallToAction {
        /**
          * Colour Scheme
         */
        "colourScheme"?: string;
        /**
          * Main title
         */
        "mainTitle"?: string;
        /**
          * Main title colour
         */
        "mainTitleColour"?: string;
        /**
          * Primary button Colour Scheme
         */
        "primaryButtonColourScheme"?: string;
        /**
          * Primary button Label
         */
        "primaryButtonLabel"?: string;
        /**
          * Primary button Url
         */
        "primaryButtonUrl"?: string;
        /**
          * Secondary button Colour Scheme
         */
        "secondaryButtonColourScheme"?: string;
        /**
          * Secondary button Label
         */
        "secondaryButtonLabel"?: string;
        /**
          * Secondary button Url
         */
        "secondaryButtonUrl"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Slug colour
         */
        "slugColour"?: string;
        /**
          * Subtitle
         */
        "subtitle"?: string;
        /**
          * Subtitle colour
         */
        "subtitleColour"?: string;
        /**
          * Teaser
         */
        "teaser"?: string;
        /**
          * Teaser colour
         */
        "teaserColour"?: string;
    }
    interface BiggiveCampaignCard {
        /**
          * Full URL of a banner image.
         */
        "banner"?: string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle"?: string;
        /**
          * e.g. "Match Funded".
         */
        "campaignType"?: string;
        /**
          * e.g. 'GBP'.
         */
        "currencyCode"?: string;
        /**
          * Donate button label
         */
        "donateButtonLabel"?: string;
        /**
          * Donate button url
         */
        "donateButtonUrl"?: string;
        /**
          * Match funds remaining.
         */
        "matchFundsRemaining"?: number;
        /**
          * More information button label
         */
        "moreInfoButtonLabel"?: string;
        /**
          * More information button url
         */
        "moreInfoButtonUrl"?: string;
        /**
          * Display name of the charity or non-profit.
         */
        "organisationName"?: string;
        /**
          * Total the campaign has raised so far including matching but excluding any tax relief, in major unit of currency e.g. pounds GBP.
         */
        "totalFundsRaised"?: number;
    }
    interface BiggiveCampaignCardFilterGrid {
        /**
          * Defines the text on the search button
         */
        "buttonText"?: string;
        /**
          * Intro
         */
        "intro"?: string;
        /**
          * This event `doTextSearch` event is emitted and propogates to the parent component which handles it
         */
        "onDoTextSearch"?: (event: BiggiveCampaignCardFilterGridCustomEvent<string>) => void;
        /**
          * Defines the text displayed as the placeholder in the input field before the user types anything
         */
        "placeholderText"?: string;
    }
    interface BiggiveDropdown {
    }
    interface BiggiveFooter {
    }
    interface BiggiveForm {
    }
    interface BiggiveFormFieldSelect {
    }
    interface BiggiveGraphic {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme"?: string;
        /**
          * Button Label
         */
        "buttonLabel"?: string;
        /**
          * Button Url
         */
        "buttonUrl"?: string;
        /**
          * Colour Scheme
         */
        "colourScheme"?: string;
        /**
          * Full URL of a graphic.
         */
        "graphicUrl"?: string;
        /**
          * Video title
         */
        "mainTitle"?: string;
        /**
          * Slug colour
         */
        "mainTitleColour"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Slug colour
         */
        "slugColour"?: string;
        /**
          * Introductory teaser text
         */
        "teaser"?: string;
        /**
          * Teaser colour
         */
        "teaserColour"?: string;
    }
    interface BiggiveGrid {
        /**
          * Column count
         */
        "columnCount"?: number;
        /**
          * Column gap
         */
        "columnGap"?: number;
    }
    interface BiggiveHeader {
    }
    interface BiggiveHeroImage {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme"?: string;
        /**
          * Button Label
         */
        "buttonLabel"?: string;
        /**
          * Button Url
         */
        "buttonUrl"?: string;
        /**
          * Colour Scheme
         */
        "colourScheme"?: string;
        /**
          * Full URL of a logo image.
         */
        "logo"?: string;
        /**
          * Full URL of a main hero image.
         */
        "mainImage"?: string;
        /**
          * Hero image title, typically the page.
         */
        "mainTitle"?: string;
        /**
          * Main title colour
         */
        "mainTitleColour"?: string;
        /**
          * Header slug
         */
        "slug"?: string;
        /**
          * Header slug colour
         */
        "slugColour"?: string;
        /**
          * Introductory teaser text
         */
        "teaser"?: string;
        /**
          * Teaser colour
         */
        "teaserColour"?: string;
    }
    interface BiggiveIcon {
    }
    interface BiggiveProgressBar {
        /**
          * Colour Scheme
         */
        "colourScheme"?: string;
        /**
          * Text
         */
        "counter"?: number;
    }
    interface BiggiveQuote {
        /**
          * Attribution text
         */
        "attribution"?: string;
        /**
          * Colour Scheme
         */
        "colourScheme"?: string;
        /**
          * Quote text
         */
        "quote"?: string;
    }
    interface BiggiveSearch {
        /**
          * Defines the text on the search button
         */
        "buttonText"?: string;
        /**
          * This event `doSearch` event is emitted and propogates to the parent component which handles it
         */
        "onDoSearch"?: (event: BiggiveSearchCustomEvent<string>) => void;
        /**
          * Defines the text displayed as the placeholder in the input field before the user types anything
         */
        "placeholderText"?: string;
    }
    interface BiggiveSection {
        /**
          * Colour scheme
         */
        "colourScheme"?: string;
        /**
          * Section style bottom
         */
        "sectionStyleBottom"?: string;
        /**
          * Section style top
         */
        "sectionStyleTop"?: string;
        /**
          * Space after
         */
        "spaceAfter"?: number;
    }
    interface BiggiveSocialIcon {
        /**
          * service
         */
        "service"?: string;
        /**
          * Url
         */
        "url"?: string;
    }
    interface BiggiveTextInput {
    }
    interface BiggiveTotalizer {
        /**
          * e.g. 'GBP'.
         */
        "currencyCode"?: string;
        /**
          * Include GiftAid
         */
        "includingGiftAid"?: boolean;
        /**
          * Primary banner colour
         */
        "primaryColour"?: string;
        /**
          * Primary text colour
         */
        "primaryTextColour"?: string;
        /**
          * Secondary banner colour
         */
        "secondaryColour"?: string;
        /**
          * Secondary text colour
         */
        "secondaryTextColour"?: string;
        /**
          * Total match funds.
         */
        "totalMatchFunds"?: number;
        /**
          * Total raised.
         */
        "totalRaised"?: number;
    }
    interface BiggiveVideo {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme"?: string;
        /**
          * Button Label
         */
        "buttonLabel"?: string;
        /**
          * Button Url
         */
        "buttonUrl"?: string;
        /**
          * Colour Scheme
         */
        "colourScheme"?: string;
        /**
          * Video title
         */
        "mainTitle"?: string;
        /**
          * Slug colour
         */
        "mainTitleColour"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Slug colour
         */
        "slugColour"?: string;
        /**
          * Introductory teaser text
         */
        "teaser"?: string;
        /**
          * Teaser colour
         */
        "teaserColour"?: string;
        /**
          * Full URL of a video.
         */
        "videoUrl"?: string;
    }
    interface IntrinsicElements {
        "biggive-button": BiggiveButton;
        "biggive-call-to-action": BiggiveCallToAction;
        "biggive-campaign-card": BiggiveCampaignCard;
        "biggive-campaign-card-filter-grid": BiggiveCampaignCardFilterGrid;
        "biggive-dropdown": BiggiveDropdown;
        "biggive-footer": BiggiveFooter;
        "biggive-form": BiggiveForm;
        "biggive-form-field-select": BiggiveFormFieldSelect;
        "biggive-graphic": BiggiveGraphic;
        "biggive-grid": BiggiveGrid;
        "biggive-header": BiggiveHeader;
        "biggive-hero-image": BiggiveHeroImage;
        "biggive-icon": BiggiveIcon;
        "biggive-progress-bar": BiggiveProgressBar;
        "biggive-quote": BiggiveQuote;
        "biggive-search": BiggiveSearch;
        "biggive-section": BiggiveSection;
        "biggive-social-icon": BiggiveSocialIcon;
        "biggive-text-input": BiggiveTextInput;
        "biggive-totalizer": BiggiveTotalizer;
        "biggive-video": BiggiveVideo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "biggive-button": LocalJSX.BiggiveButton & JSXBase.HTMLAttributes<HTMLBiggiveButtonElement>;
            "biggive-call-to-action": LocalJSX.BiggiveCallToAction & JSXBase.HTMLAttributes<HTMLBiggiveCallToActionElement>;
            "biggive-campaign-card": LocalJSX.BiggiveCampaignCard & JSXBase.HTMLAttributes<HTMLBiggiveCampaignCardElement>;
            "biggive-campaign-card-filter-grid": LocalJSX.BiggiveCampaignCardFilterGrid & JSXBase.HTMLAttributes<HTMLBiggiveCampaignCardFilterGridElement>;
            "biggive-dropdown": LocalJSX.BiggiveDropdown & JSXBase.HTMLAttributes<HTMLBiggiveDropdownElement>;
            "biggive-footer": LocalJSX.BiggiveFooter & JSXBase.HTMLAttributes<HTMLBiggiveFooterElement>;
            "biggive-form": LocalJSX.BiggiveForm & JSXBase.HTMLAttributes<HTMLBiggiveFormElement>;
            "biggive-form-field-select": LocalJSX.BiggiveFormFieldSelect & JSXBase.HTMLAttributes<HTMLBiggiveFormFieldSelectElement>;
            "biggive-graphic": LocalJSX.BiggiveGraphic & JSXBase.HTMLAttributes<HTMLBiggiveGraphicElement>;
            "biggive-grid": LocalJSX.BiggiveGrid & JSXBase.HTMLAttributes<HTMLBiggiveGridElement>;
            "biggive-header": LocalJSX.BiggiveHeader & JSXBase.HTMLAttributes<HTMLBiggiveHeaderElement>;
            "biggive-hero-image": LocalJSX.BiggiveHeroImage & JSXBase.HTMLAttributes<HTMLBiggiveHeroImageElement>;
            "biggive-icon": LocalJSX.BiggiveIcon & JSXBase.HTMLAttributes<HTMLBiggiveIconElement>;
            "biggive-progress-bar": LocalJSX.BiggiveProgressBar & JSXBase.HTMLAttributes<HTMLBiggiveProgressBarElement>;
            "biggive-quote": LocalJSX.BiggiveQuote & JSXBase.HTMLAttributes<HTMLBiggiveQuoteElement>;
            "biggive-search": LocalJSX.BiggiveSearch & JSXBase.HTMLAttributes<HTMLBiggiveSearchElement>;
            "biggive-section": LocalJSX.BiggiveSection & JSXBase.HTMLAttributes<HTMLBiggiveSectionElement>;
            "biggive-social-icon": LocalJSX.BiggiveSocialIcon & JSXBase.HTMLAttributes<HTMLBiggiveSocialIconElement>;
            "biggive-text-input": LocalJSX.BiggiveTextInput & JSXBase.HTMLAttributes<HTMLBiggiveTextInputElement>;
            "biggive-totalizer": LocalJSX.BiggiveTotalizer & JSXBase.HTMLAttributes<HTMLBiggiveTotalizerElement>;
            "biggive-video": LocalJSX.BiggiveVideo & JSXBase.HTMLAttributes<HTMLBiggiveVideoElement>;
        }
    }
}
