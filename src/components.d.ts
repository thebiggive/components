/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { spacingOption } from "./globals/spacing-option";
import { brandColour } from "./globals/brand-colour";
import { headingTag } from "./globals/heading-tag";
import { headingSize } from "./globals/heading-size";
export namespace Components {
    interface BiggiveAccordion {
        "headingColour": brandColour;
        "spaceBelow": spacingOption;
        "textColour": brandColour;
    }
    interface BiggiveAccordionEntry {
        "heading": string;
    }
    interface BiggiveArticleCard {
        "backgroundColour": brandColour;
        "backgroundImageUrl": string;
        "buttonColour": brandColour;
        "buttonLabel": string;
        "buttonUrl": string;
        "clipBottomLeftCorner": boolean;
        "clipTopRightCorner": boolean;
        "date": string;
        "dateColour": brandColour;
        "image1AltText": string;
        "image1Url": string;
        "image2AltText": string;
        "image2Url": string;
        "imageLabel": string;
        "imageLabelColour": brandColour;
        "mainImageAltText": string;
        "mainImageUrl": string;
        "mainTitle": string;
        "mainTitleColour": brandColour;
        "slug": string;
        "slugColour": brandColour;
        "spaceBelow": spacingOption;
    }
    interface BiggiveBackToTop {
    }
    interface BiggiveBasicCard {
        "addAnimation": boolean;
        "backgroundColour": brandColour;
        "backgroundImageUrl": string;
        "buttonAlign": string;
        "buttonColourScheme": string;
        "buttonLabel": string;
        "buttonStyle": string;
        "buttonUrl": string;
        "cardColour": brandColour;
        "clipBottomLeftCorner": boolean;
        "clipTopRightCorner": boolean;
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        "icon": boolean;
        "iconColour": brandColour;
        "mainImageAltText": string;
        "mainImageUrl": string;
        "mainTitle": string;
        "spaceBelow": spacingOption;
        "subtitle": string;
        "teaser": string;
        "textColour": brandColour;
    }
    interface BiggiveBeneficiaryIcon {
        /**
          * Background colour
         */
        "backgroundColour": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Background colour
         */
        "iconColour": string;
        /**
          * Label
         */
        "label": string;
        /**
          * Url
         */
        "url": string;
    }
    interface BiggiveBiographyCard {
        "backgroundColour": brandColour;
        "borderWidth": spacingOption;
        "circle": boolean;
        "fullName": string;
        "imageStyle": 'cover' | 'contain';
        "imageUrl": string;
        "jobTitle": string;
        "ratio": '1,1' | '1,1.5' | '1,2';
        "rounded": boolean;
        "spaceBelow": spacingOption;
        "textAlign": 'center' | 'left' | 'right';
        "textColour": brandColour;
        "url": string;
    }
    interface BiggiveBoxedContent {
        /**
          * Background colour
         */
        "backgroundColour": string;
        /**
          * Horizontal padding
         */
        "horizontalPadding": number;
        /**
          * Shadow
         */
        "shadow": boolean;
        /**
          * Space below component
         */
        "spaceBelow": number;
        /**
          * Vertical padding
         */
        "verticalPadding": number;
    }
    interface BiggiveBrandedImage {
        /**
          * Charity location
         */
        "charityLocation": string;
        /**
          * Charity name
         */
        "charityName": string;
        /**
          * Link to the charity's website
          * @deprecated We should stop passing this soon, and will link to charity URLs alongside socials.
         */
        "charityUrl": string;
        /**
          * Full URL of a image.
         */
        "imageUrl": string;
        /**
          * Full URL of the logo.
         */
        "logoUrl": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggiveButton {
        "buttonId": undefined | string;
        /**
          * Centered
         */
        "centered": boolean;
        /**
          * Colour Scheme
         */
        "colourScheme": string;
        /**
          * Display full width
         */
        "fullWidth": boolean;
        /**
          * Text
         */
        "label": string;
        /**
          * New Tab
         */
        "openInNewTab": boolean;
        /**
          * Rounded corners
         */
        "rounded": boolean;
        /**
          * Size
         */
        "size": string;
        /**
          * Space below component
         */
        "spaceBelow": number;
        /**
          * URL
         */
        "url": string;
    }
    interface BiggiveCallToAction {
        /**
          * Default text colour
         */
        "defaultTextColour": string;
        /**
          * Main title
         */
        "mainTitle": string;
        /**
          * Main title colour
         */
        "mainTitleColour": string;
        /**
          * Main title size
         */
        "mainTitleSize": number;
        /**
          * Primary button Colour Scheme
         */
        "primaryButtonColourScheme": string;
        /**
          * Primary button Label
         */
        "primaryButtonLabel": string;
        /**
          * Primary button Url
         */
        "primaryButtonUrl": string;
        /**
          * Secondary button Colour Scheme
         */
        "secondaryButtonColourScheme": string;
        /**
          * Secondary button Label
         */
        "secondaryButtonLabel": string;
        /**
          * Secondary button Url
         */
        "secondaryButtonUrl": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Slug colour
         */
        "slugColour": string;
        /**
          * Slug size
         */
        "slugSize": number;
        /**
          * Space above component
         */
        "spaceAbove": number;
        /**
          * Space below component
         */
        "spaceBelow": number;
        /**
          * Subtitle
         */
        "subtitle": string;
        /**
          * Subtitle colour
         */
        "subtitleColour": string;
        /**
          * Main title size
         */
        "subtitleSize": number;
        /**
          * Teaser
         */
        "teaser": string;
        /**
          * Teaser colour
         */
        "teaserColour": string;
    }
    interface BiggiveCampaignCard {
        /**
          * Full URL of a banner image.
         */
        "banner": string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle": string;
        /**
          * e.g. "Match Funded".
         */
        "campaignType": string;
        /**
          * To be used alongside isFutureCampaign = true or isPastCampaign = true. If either is true, we render out: 'Launches: ' + datetime or 'Closed: ' + datetime. Preferred format: DD/MM/YYYY, HH:MM DON-661.
         */
        "datetime": string;
        /**
          * Donate button colour scheme
         */
        "donateButtonColourScheme": string;
        /**
          * Donate button label
         */
        "donateButtonLabel": string;
        /**
          * Donate button url
         */
        "donateButtonUrl": string;
        /**
          * Boolean flag telling the component if the campaign is in the future (not open yet).
         */
        "isFutureCampaign": boolean;
        /**
          * Boolean flag telling the component if the campaign is in the future (not open yet).
         */
        "isPastCampaign": boolean;
        /**
          * Donate button colour scheme
         */
        "moreInfoButtonColourScheme": string;
        /**
          * More information button label
         */
        "moreInfoButtonLabel": string;
        /**
          * More information button url
         */
        "moreInfoButtonUrl": string;
        /**
          * Display name of the charity or non-profit.
         */
        "organisationName": string;
        /**
          * Amount for the primary figure, formatted with currency symbol
         */
        "primaryFigureAmount": string;
        /**
          * Label for the primary figure
         */
        "primaryFigureLabel": string;
        /**
          * Progress bar percentage
         */
        "progressBarCounter": number;
        /**
          * Amount for the secondary figure, formatted with currency symbol
         */
        "secondaryFigureAmount": string;
        /**
          * Label for the secondary figure
         */
        "secondaryFigureLabel": string;
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggiveCampaignCardFilterGrid {
        /**
          * JSON array of beneficiary key/values, or takes a stringified equiavalent (for Storybook)
         */
        "beneficiaryOptions": string | Record<string, string>;
        /**
          * Defines the text on the search button
         */
        "buttonText": string;
        /**
          * JSON array of category key/values, or takes a stringified equiavalent (for Storybook)
         */
        "categoryOptions": string | Record<string, string>;
        /**
          * JSON array of funding key/values, or takes a stringified equiavalent (for Storybook)
         */
        "fundingOptions": string | Record<string, string>;
        /**
          * Intro
         */
        "intro": string;
        /**
          * JSON array of location key/values, or takes a stringified equiavalent (for Storybook)
         */
        "locationOptions": string | Record<string, string>;
        /**
          * Defines the text displayed as the placeholder in the input field before the user types anything
         */
        "placeholderText": string;
        /**
          * Optional search text prop. Useful for pre-populating the search field when the page is loaded with a search term already existing in the URL. This can happen when sharing links, or if a donor goes to a campaign page after searching, and then returns to the search results. In such a case, the search box text will clear, unless we use this prop to populate it on rendering. DON-652.
         */
        "searchText": string | null;
        /**
          * For injecting the chosen beneficiary to filter by, as per the comment above for `selectedSortByOption`.
         */
        "selectedFilterBeneficiary": string | null;
        /**
          * For injecting the chosen category to filter by, as per the comment above for `selectedSortByOption`.
         */
        "selectedFilterCategory": string | null;
        /**
          * For injecting the chosen funding to filter by, as per the comment above for `selectedSortByOption`.
         */
        "selectedFilterFunding": string | null;
        /**
          * For injecting the chosen location to filter by, as per the comment above for `selectedSortByOption`.
         */
        "selectedFilterLocation": string | null;
        /**
          * This helps us inject a pre-selected dropdown value from outside of this component. This is especially helpful for the Meta campaign and Explore pages, where searching by text wipes out previous sort options and re-uses Relevance, or where one of those two pages is loaded directly with URL parameters - in such a scenario the dropdown shows that it's pre-selected. DON-558.
         */
        "selectedSortByOption": 'Most raised' | 'Match funds remaining' | 'Relevance';
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggiveCampaignHighlights {
        /**
          * Full URL of a banner image.
         */
        "banner": string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle": string;
        /**
          * Champion's name
         */
        "championName": string;
        /**
          * Link to all meta-campaigns funded by this champion. For example: /christmas-challenge-2022/the-reed-foundation-22 In other words, it follows the following format: '/' + campaign.parentRef + '/' + campaign.championRef
         */
        "championUrl": string;
        /**
          * Amount for the primary figure, formatted with currency symbol
         */
        "primaryFigureAmount": string;
        /**
          * Label for the primary figure
         */
        "primaryFigureLabel": string;
        /**
          * Primary stat icon
         */
        "primaryStatIcon": string;
        /**
          * Primary stat text
         */
        "primaryStatText": string;
        /**
          * Progress bar percentage
         */
        "progressBarCounter": number;
        /**
          * Amount for the secondary figure, formatted with currency symbol
         */
        "secondaryFigureAmount": string;
        /**
          * Label for the secondary figure
         */
        "secondaryFigureLabel": string;
        /**
          * Secondary stat icon
         */
        "secondaryStatIcon": string;
        /**
          * Secondary stat text
         */
        "secondaryStatText": string;
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggiveCarousel {
        "buttonBackgroundColour": brandColour;
        "buttonIconColour": brandColour;
        "columnCount": 1 | 2 | 3 | 4 | 5;
        "resizeToFitContent": () => Promise<void>;
        "spaceBelow": spacingOption;
    }
    interface BiggiveCategoryIcon {
        /**
          * Background colour
         */
        "backgroundColour": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Background colour
         */
        "iconColour": string;
        /**
          * Label
         */
        "label": string;
        /**
          * Url
         */
        "url": string;
    }
    interface BiggiveFilteredCarousel {
        "buttonBackgroundColour": brandColour;
        "buttonIconColour": brandColour;
        "columnCount": 1 | 2 | 3 | 4 | 5;
        "spaceBelow": spacingOption;
    }
    interface BiggiveFooter {
        /**
          * URL prefixes vary by environment, and components library is not best placed to know what they are, so we take them as props
         */
        "blogUrlPrefix": string | undefined;
        "experienceUrlPrefix": string | undefined;
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * Conditionally render footer menu: hard-coded (preset) when set to true, dynamic (slot-based) when set to false
         */
        "usePresetFooter": boolean;
    }
    interface BiggiveForm {
    }
    interface BiggiveFormFieldSelect {
        /**
          * Must match background of containing element, or unintended shape will appear.
         */
        "backgroundColour": 'white' | 'grey';
        "onSelectionChange": (value: string) => void;
        /**
          * JSON array of category key/values, or takes a stringified equiavalent (for Storybook)
         */
        "options": string | Record<string, string>;
        /**
          * Placeholder
         */
        "placeholder": string | undefined;
        /**
          * Displayed as 'eyebrow' label over the top border of the box.
         */
        "prompt": string | null;
        "selectStyle": 'bordered' | 'underlined';
        "selectedLabel": string | null;
        "selectedValue": string | null;
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggiveFormattedText {
        /**
          * Default text colour
         */
        "defaultTextColour": string;
        /**
          * Width
         */
        "maxWidth": number;
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggiveGenericIcon {
        "backgroundColour": brandColour;
        "icon": string;
        "iconColour": brandColour;
        "iconGroup": 'beneficiary' | 'misc' | 'social' | 'category';
        "url": string;
    }
    interface BiggiveGrid {
        "columnCount": number;
        "columnGap": spacingOption;
        "spaceBelow": number;
        /**
          * Deprecated - should use columGap Instead
         */
        "spaceBetween": boolean;
    }
    interface BiggiveHeading {
        "align": string;
        "colour": brandColour;
        "htmlElement": headingTag;
        "icon": boolean;
        "iconColour": brandColour;
        "size": headingSize;
        "spaceAbove": spacingOption;
        "spaceBelow": spacingOption;
        "text": string;
    }
    interface BiggiveHeroImage {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme": brandColour;
        /**
          * Button Label
         */
        "buttonLabel": string;
        /**
          * Button Url
         */
        "buttonUrl": string;
        /**
          * Colour Scheme
         */
        "colourScheme": brandColour;
        /**
          * Full URL of a logo image.
         */
        "logo": string;
        /**
          * Logo alt text
         */
        "logoAltText": string;
        /**
          * Logo container height selection. Numbers are not measurements.
         */
        "logoHeight": 1|2|3|4|5|6|7|8|9|10;
        /**
          * Full URL of a main hero image.
         */
        "mainImage": string|null;
        /**
          * Horizontal alignment of image
         */
        "mainImageAlignHorizontal": string;
        /**
          * Vertical alignment of image
         */
        "mainImageAlignVertical": string;
        /**
          * Hero image title, typically the page.
         */
        "mainTitle": string;
        /**
          * Main title colour
         */
        "mainTitleColour"?: brandColour;
        /**
          * Header slug
         */
        "slug": string;
        /**
          * Header slug colour
         */
        "slugColour": brandColour;
        /**
          * Space below component
         */
        "spaceBelow": spacingOption;
        /**
          * Introductory teaser text
         */
        "teaser": string;
        /**
          * Teaser colour
         */
        "teaserColour"?: brandColour;
    }
    interface BiggiveIconButton {
        "arrow": boolean;
        "arrowColour": brandColour;
        "backgroundColour": brandColour;
        "backgroundPadding": spacingOption;
        "buttonId": undefined | string;
        "centered": boolean;
        "circle": boolean;
        "icon": string;
        "iconGroup": 'beneficiary' | 'misc' | 'social' | 'category';
        "openInNewTab": boolean;
        "rounded": boolean;
        "shadow": boolean;
        "size": 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
        "spaceBelow": spacingOption;
        "text": string;
        "textColour": brandColour;
        "url": string;
    }
    interface BiggiveIconGroup {
        /**
          * Label
         */
        "label": string;
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggiveImage {
        /**
          * Image width
         */
        "height": number;
        /**
          * Image alt text tag.
         */
        "imageAltText": string;
        /**
          * Full URL of a image.
         */
        "imageUrl": string;
        /**
          * Size unit
         */
        "sizeUnit": string;
        /**
          * Space above component
         */
        "spaceAbove": number;
        /**
          * Space below component
         */
        "spaceBelow": number;
        /**
          * Image width
         */
        "width": number;
    }
    interface BiggiveImageButton {
        "arrow": boolean;
        "arrowColour": brandColour;
        "backgroundColour": brandColour;
        "backgroundPadding": spacingOption;
        "buttonId": undefined | string;
        "centered": boolean;
        "circle": boolean;
        "imageStyle": string;
        "imageUrl": string;
        "openInNewTab": boolean;
        "rounded": boolean;
        "shadow": boolean;
        "size": 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
        "spaceBelow": spacingOption;
        "text": string;
        "textColour": brandColour;
        "url": string;
    }
    interface BiggiveImageFeature {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme": string;
        /**
          * Button Label
         */
        "buttonLabel": string;
        /**
          * Button Url
         */
        "buttonUrl": string;
        /**
          * Default text colour
         */
        "defaultTextColour": string;
        /**
          * Image alt text tag.
         */
        "imageAltText": string;
        /**
          * Full URL of a image.
         */
        "imageUrl": string;
        /**
          * Video title
         */
        "mainTitle": string;
        /**
          * Slug colour
         */
        "mainTitleColour": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Slug colour
         */
        "slugColour": string;
        /**
          * Space below component
         */
        "spaceBelow": number;
        /**
          * Introductory teaser text
         */
        "teaser": string;
        /**
          * Teaser colour
         */
        "teaserColour": string;
    }
    interface BiggiveMainMenu {
        "blogUrlPrefix": string | undefined;
        "closeMobileMenuFromOutside": () => Promise<void>;
        /**
          * E.g. "https://donate.thebiggive.org.uk" for production (currently)
         */
        "donateUrlPrefix": string | undefined;
        "experienceUrlPrefix": string | undefined;
        /**
          * Whether the current user is logged in (i.e. is assumed to have a valid JWT). They get links to some extra content if they are.
         */
        "isLoggedIn": boolean;
        "logoUrl": string;
        /**
          * If true, content passed in via slots will be ignored, and this will just render a hard-coded menu that's the same everywhere. When BG2-2286 is done this will be permantly true and the prop will be deleted.
         */
        "usePresetMenuContent": boolean;
    }
    interface BiggiveMiscIcon {
        /**
          * Background colour
         */
        "backgroundColour": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Background colour
         */
        "iconColour": string;
        /**
          * Url
         */
        "url": string;
    }
    interface BiggiveNavGroup {
        /**
          * Inline
         */
        "inline": boolean;
    }
    interface BiggiveNavItem {
        /**
          * URL
         */
        "iconColour": string;
        /**
          * Label
         */
        "label": string;
        /**
          * URL
         */
        "url": string;
    }
    interface BiggivePageColumn {
    }
    interface BiggivePageColumns {
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggivePageSection {
        /**
          * Colour scheme
         */
        "colourScheme": string;
        /**
          * Width
         */
        "maxWidth": number;
        /**
          * Bleeds the primary brand colour to the left and right edge of the viewport, even if used within a containing block element.
         */
        "primaryFullBleed": boolean;
        /**
          * Section style bottom
         */
        "sectionStyleBottom": string;
        /**
          * Section style top
         */
        "sectionStyleTop": string;
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggivePopup {
        "closeFromOutside": () => Promise<void>;
        "openFromOutside": () => Promise<void>;
    }
    interface BiggiveProgressBar {
        /**
          * Colour Scheme
         */
        "colourScheme": string;
        /**
          * Percentage to show + use for CSS width; round before input if desired
         */
        "counter": number;
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggiveQuote {
        "attribution": string;
        "defaultTextColour": brandColour;
        "quote": string;
        "quoteIconColour": brandColour;
        "spaceBelow": spacingOption;
    }
    interface BiggiveSheet {
        "backgroundColour": brandColour;
        /**
          * A string ID (no spaces) unique within the page context, used to trigger the opening of the sheet from an anchor hash.
         */
        "sheetId": string;
        "textColour": brandColour;
    }
    /**
     * Used to indicate and link to a charity's social page, or their own web site.
     */
    interface BiggiveSocialIcon {
        /**
          * Background colour
         */
        "backgroundColour": string;
        /**
          * Icon colour
         */
        "iconColour": string;
        /**
          * Used within accessible labels for links. Typically a charity name or "Big Give". Can also be "Share".
         */
        "labelPrefix": string;
        /**
          * Service name
         */
        "service": 'Facebook' | 'Instagram' | 'LinkedIn' | 'Twitter' | 'Web' | 'Whatsapp' | 'YouTube';
        /**
          * Url
         */
        "url": string;
        /**
          * Used in the social icons in the biggive-footer, which are more spaced out than others across the site. COM-43.
         */
        "wide": boolean;
    }
    interface BiggiveTab {
        "tabTitle": string;
    }
    interface BiggiveTabbedContent {
        "buttonBackgroundColour": brandColour;
        "buttonIconColour": brandColour;
        "navigationHighlightColour": brandColour;
        "selectedNavigationHighlightColour": brandColour;
        "selectedTextColour": brandColour;
        "spaceBelow": spacingOption;
        "textColour": brandColour;
    }
    interface BiggiveTable {
        "bodyBackgroundColour": brandColour;
        "bodyTextColour": brandColour;
        "headerBackgroundColour": brandColour;
        "headerTextColour": brandColour;
        "spaceBelow": spacingOption;
    }
    /**
     * Initially developed for use within the new donate stepper design. Currently has a hard-coded background
     * of $colour-grey-background, intened to appear transparent when used on a page with a matching background.
     * Please ensure input is styled as width: 100%.
     */
    interface BiggiveTextInput {
        /**
          * ISO-4217 currency code if input is for a money value
         */
        "currency": 'GBP' | 'USD' | undefined;
        /**
          * Displayed as 'eyebrow' label over the top border of the box.
         */
        "prompt": string;
        "selectStyle": 'bordered' | 'underlined';
        "spaceBelow": number;
        "value": string;
    }
    interface BiggiveTimeline {
        "buttonBackgroundColour": brandColour;
        "buttonIconColour": brandColour;
        "entryBackgroundColour": brandColour;
        "entryDateColour": brandColour;
        "entryHighlightColour": brandColour;
        "entryTextColour": brandColour;
        "entryTitleColour": brandColour;
        "navigationHighlightColour": brandColour;
        "selectedNavigationHighlightColour": brandColour;
        "selectedTextColour": brandColour;
        "spaceBelow": spacingOption;
        "textColour": brandColour;
    }
    interface BiggiveTimelineEntry {
        /**
          * Should be in the format 'YYYY-mm-dd', for example '2023-01-01'
         */
        "date": string;
        "heading": string;
    }
    interface BiggiveTotalizer {
        /**
          * Primary message
         */
        "mainMessage": string;
        /**
          * Primary banner colour
         */
        "primaryColour": string;
        /**
          * Primary text colour
         */
        "primaryTextColour": string;
        /**
          * Secondary banner colour
         */
        "secondaryColour": string;
        /**
          * Secondary text colour
         */
        "secondaryTextColour": string;
        /**
          * Space below component
         */
        "spaceBelow": number;
    }
    interface BiggiveTotalizerTickerItem {
        /**
          * Figure
         */
        "figure": string;
        /**
          * Figure
         */
        "label": string;
    }
    interface BiggiveVideo {
        /**
          * Space above component
         */
        "spaceAbove": number;
        /**
          * Space below component
         */
        "spaceBelow": number;
        /**
          * Full URL of a video.
         */
        "videoUrl": string;
    }
    interface BiggiveVideoFeature {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme": string;
        /**
          * Button Label
         */
        "buttonLabel": string;
        /**
          * Button Url
         */
        "buttonUrl": string;
        /**
          * Default text colour
         */
        "defaultTextColour": string;
        /**
          * Video title
         */
        "mainTitle": string;
        /**
          * Slug colour
         */
        "mainTitleColour": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Slug colour
         */
        "slugColour": string;
        /**
          * Space above component
         */
        "spaceAbove": number;
        /**
          * Space below component
         */
        "spaceBelow": number;
        /**
          * Introductory teaser text
         */
        "teaser": string;
        /**
          * Teaser colour
         */
        "teaserColour": string;
        /**
          * Full URL of a video.
         */
        "videoUrl": string;
    }
}
export interface BiggiveButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveButtonElement;
}
export interface BiggiveCampaignCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveCampaignCardElement;
}
export interface BiggiveCampaignCardFilterGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveCampaignCardFilterGridElement;
}
export interface BiggiveIconButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveIconButtonElement;
}
export interface BiggiveImageButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveImageButtonElement;
}
declare global {
    interface HTMLBiggiveAccordionElement extends Components.BiggiveAccordion, HTMLStencilElement {
    }
    var HTMLBiggiveAccordionElement: {
        prototype: HTMLBiggiveAccordionElement;
        new (): HTMLBiggiveAccordionElement;
    };
    interface HTMLBiggiveAccordionEntryElement extends Components.BiggiveAccordionEntry, HTMLStencilElement {
    }
    var HTMLBiggiveAccordionEntryElement: {
        prototype: HTMLBiggiveAccordionEntryElement;
        new (): HTMLBiggiveAccordionEntryElement;
    };
    interface HTMLBiggiveArticleCardElement extends Components.BiggiveArticleCard, HTMLStencilElement {
    }
    var HTMLBiggiveArticleCardElement: {
        prototype: HTMLBiggiveArticleCardElement;
        new (): HTMLBiggiveArticleCardElement;
    };
    interface HTMLBiggiveBackToTopElement extends Components.BiggiveBackToTop, HTMLStencilElement {
    }
    var HTMLBiggiveBackToTopElement: {
        prototype: HTMLBiggiveBackToTopElement;
        new (): HTMLBiggiveBackToTopElement;
    };
    interface HTMLBiggiveBasicCardElement extends Components.BiggiveBasicCard, HTMLStencilElement {
    }
    var HTMLBiggiveBasicCardElement: {
        prototype: HTMLBiggiveBasicCardElement;
        new (): HTMLBiggiveBasicCardElement;
    };
    interface HTMLBiggiveBeneficiaryIconElement extends Components.BiggiveBeneficiaryIcon, HTMLStencilElement {
    }
    var HTMLBiggiveBeneficiaryIconElement: {
        prototype: HTMLBiggiveBeneficiaryIconElement;
        new (): HTMLBiggiveBeneficiaryIconElement;
    };
    interface HTMLBiggiveBiographyCardElement extends Components.BiggiveBiographyCard, HTMLStencilElement {
    }
    var HTMLBiggiveBiographyCardElement: {
        prototype: HTMLBiggiveBiographyCardElement;
        new (): HTMLBiggiveBiographyCardElement;
    };
    interface HTMLBiggiveBoxedContentElement extends Components.BiggiveBoxedContent, HTMLStencilElement {
    }
    var HTMLBiggiveBoxedContentElement: {
        prototype: HTMLBiggiveBoxedContentElement;
        new (): HTMLBiggiveBoxedContentElement;
    };
    interface HTMLBiggiveBrandedImageElement extends Components.BiggiveBrandedImage, HTMLStencilElement {
    }
    var HTMLBiggiveBrandedImageElement: {
        prototype: HTMLBiggiveBrandedImageElement;
        new (): HTMLBiggiveBrandedImageElement;
    };
    interface HTMLBiggiveButtonElement extends Components.BiggiveButton, HTMLStencilElement {
    }
    var HTMLBiggiveButtonElement: {
        prototype: HTMLBiggiveButtonElement;
        new (): HTMLBiggiveButtonElement;
    };
    interface HTMLBiggiveCallToActionElement extends Components.BiggiveCallToAction, HTMLStencilElement {
    }
    var HTMLBiggiveCallToActionElement: {
        prototype: HTMLBiggiveCallToActionElement;
        new (): HTMLBiggiveCallToActionElement;
    };
    interface HTMLBiggiveCampaignCardElement extends Components.BiggiveCampaignCard, HTMLStencilElement {
    }
    var HTMLBiggiveCampaignCardElement: {
        prototype: HTMLBiggiveCampaignCardElement;
        new (): HTMLBiggiveCampaignCardElement;
    };
    interface HTMLBiggiveCampaignCardFilterGridElement extends Components.BiggiveCampaignCardFilterGrid, HTMLStencilElement {
    }
    var HTMLBiggiveCampaignCardFilterGridElement: {
        prototype: HTMLBiggiveCampaignCardFilterGridElement;
        new (): HTMLBiggiveCampaignCardFilterGridElement;
    };
    interface HTMLBiggiveCampaignHighlightsElement extends Components.BiggiveCampaignHighlights, HTMLStencilElement {
    }
    var HTMLBiggiveCampaignHighlightsElement: {
        prototype: HTMLBiggiveCampaignHighlightsElement;
        new (): HTMLBiggiveCampaignHighlightsElement;
    };
    interface HTMLBiggiveCarouselElement extends Components.BiggiveCarousel, HTMLStencilElement {
    }
    var HTMLBiggiveCarouselElement: {
        prototype: HTMLBiggiveCarouselElement;
        new (): HTMLBiggiveCarouselElement;
    };
    interface HTMLBiggiveCategoryIconElement extends Components.BiggiveCategoryIcon, HTMLStencilElement {
    }
    var HTMLBiggiveCategoryIconElement: {
        prototype: HTMLBiggiveCategoryIconElement;
        new (): HTMLBiggiveCategoryIconElement;
    };
    interface HTMLBiggiveFilteredCarouselElement extends Components.BiggiveFilteredCarousel, HTMLStencilElement {
    }
    var HTMLBiggiveFilteredCarouselElement: {
        prototype: HTMLBiggiveFilteredCarouselElement;
        new (): HTMLBiggiveFilteredCarouselElement;
    };
    interface HTMLBiggiveFooterElement extends Components.BiggiveFooter, HTMLStencilElement {
    }
    var HTMLBiggiveFooterElement: {
        prototype: HTMLBiggiveFooterElement;
        new (): HTMLBiggiveFooterElement;
    };
    interface HTMLBiggiveFormElement extends Components.BiggiveForm, HTMLStencilElement {
    }
    var HTMLBiggiveFormElement: {
        prototype: HTMLBiggiveFormElement;
        new (): HTMLBiggiveFormElement;
    };
    interface HTMLBiggiveFormFieldSelectElement extends Components.BiggiveFormFieldSelect, HTMLStencilElement {
    }
    var HTMLBiggiveFormFieldSelectElement: {
        prototype: HTMLBiggiveFormFieldSelectElement;
        new (): HTMLBiggiveFormFieldSelectElement;
    };
    interface HTMLBiggiveFormattedTextElement extends Components.BiggiveFormattedText, HTMLStencilElement {
    }
    var HTMLBiggiveFormattedTextElement: {
        prototype: HTMLBiggiveFormattedTextElement;
        new (): HTMLBiggiveFormattedTextElement;
    };
    interface HTMLBiggiveGenericIconElement extends Components.BiggiveGenericIcon, HTMLStencilElement {
    }
    var HTMLBiggiveGenericIconElement: {
        prototype: HTMLBiggiveGenericIconElement;
        new (): HTMLBiggiveGenericIconElement;
    };
    interface HTMLBiggiveGridElement extends Components.BiggiveGrid, HTMLStencilElement {
    }
    var HTMLBiggiveGridElement: {
        prototype: HTMLBiggiveGridElement;
        new (): HTMLBiggiveGridElement;
    };
    interface HTMLBiggiveHeadingElement extends Components.BiggiveHeading, HTMLStencilElement {
    }
    var HTMLBiggiveHeadingElement: {
        prototype: HTMLBiggiveHeadingElement;
        new (): HTMLBiggiveHeadingElement;
    };
    interface HTMLBiggiveHeroImageElement extends Components.BiggiveHeroImage, HTMLStencilElement {
    }
    var HTMLBiggiveHeroImageElement: {
        prototype: HTMLBiggiveHeroImageElement;
        new (): HTMLBiggiveHeroImageElement;
    };
    interface HTMLBiggiveIconButtonElement extends Components.BiggiveIconButton, HTMLStencilElement {
    }
    var HTMLBiggiveIconButtonElement: {
        prototype: HTMLBiggiveIconButtonElement;
        new (): HTMLBiggiveIconButtonElement;
    };
    interface HTMLBiggiveIconGroupElement extends Components.BiggiveIconGroup, HTMLStencilElement {
    }
    var HTMLBiggiveIconGroupElement: {
        prototype: HTMLBiggiveIconGroupElement;
        new (): HTMLBiggiveIconGroupElement;
    };
    interface HTMLBiggiveImageElement extends Components.BiggiveImage, HTMLStencilElement {
    }
    var HTMLBiggiveImageElement: {
        prototype: HTMLBiggiveImageElement;
        new (): HTMLBiggiveImageElement;
    };
    interface HTMLBiggiveImageButtonElement extends Components.BiggiveImageButton, HTMLStencilElement {
    }
    var HTMLBiggiveImageButtonElement: {
        prototype: HTMLBiggiveImageButtonElement;
        new (): HTMLBiggiveImageButtonElement;
    };
    interface HTMLBiggiveImageFeatureElement extends Components.BiggiveImageFeature, HTMLStencilElement {
    }
    var HTMLBiggiveImageFeatureElement: {
        prototype: HTMLBiggiveImageFeatureElement;
        new (): HTMLBiggiveImageFeatureElement;
    };
    interface HTMLBiggiveMainMenuElement extends Components.BiggiveMainMenu, HTMLStencilElement {
    }
    var HTMLBiggiveMainMenuElement: {
        prototype: HTMLBiggiveMainMenuElement;
        new (): HTMLBiggiveMainMenuElement;
    };
    interface HTMLBiggiveMiscIconElement extends Components.BiggiveMiscIcon, HTMLStencilElement {
    }
    var HTMLBiggiveMiscIconElement: {
        prototype: HTMLBiggiveMiscIconElement;
        new (): HTMLBiggiveMiscIconElement;
    };
    interface HTMLBiggiveNavGroupElement extends Components.BiggiveNavGroup, HTMLStencilElement {
    }
    var HTMLBiggiveNavGroupElement: {
        prototype: HTMLBiggiveNavGroupElement;
        new (): HTMLBiggiveNavGroupElement;
    };
    interface HTMLBiggiveNavItemElement extends Components.BiggiveNavItem, HTMLStencilElement {
    }
    var HTMLBiggiveNavItemElement: {
        prototype: HTMLBiggiveNavItemElement;
        new (): HTMLBiggiveNavItemElement;
    };
    interface HTMLBiggivePageColumnElement extends Components.BiggivePageColumn, HTMLStencilElement {
    }
    var HTMLBiggivePageColumnElement: {
        prototype: HTMLBiggivePageColumnElement;
        new (): HTMLBiggivePageColumnElement;
    };
    interface HTMLBiggivePageColumnsElement extends Components.BiggivePageColumns, HTMLStencilElement {
    }
    var HTMLBiggivePageColumnsElement: {
        prototype: HTMLBiggivePageColumnsElement;
        new (): HTMLBiggivePageColumnsElement;
    };
    interface HTMLBiggivePageSectionElement extends Components.BiggivePageSection, HTMLStencilElement {
    }
    var HTMLBiggivePageSectionElement: {
        prototype: HTMLBiggivePageSectionElement;
        new (): HTMLBiggivePageSectionElement;
    };
    interface HTMLBiggivePopupElement extends Components.BiggivePopup, HTMLStencilElement {
    }
    var HTMLBiggivePopupElement: {
        prototype: HTMLBiggivePopupElement;
        new (): HTMLBiggivePopupElement;
    };
    interface HTMLBiggiveProgressBarElement extends Components.BiggiveProgressBar, HTMLStencilElement {
    }
    var HTMLBiggiveProgressBarElement: {
        prototype: HTMLBiggiveProgressBarElement;
        new (): HTMLBiggiveProgressBarElement;
    };
    interface HTMLBiggiveQuoteElement extends Components.BiggiveQuote, HTMLStencilElement {
    }
    var HTMLBiggiveQuoteElement: {
        prototype: HTMLBiggiveQuoteElement;
        new (): HTMLBiggiveQuoteElement;
    };
    interface HTMLBiggiveSheetElement extends Components.BiggiveSheet, HTMLStencilElement {
    }
    var HTMLBiggiveSheetElement: {
        prototype: HTMLBiggiveSheetElement;
        new (): HTMLBiggiveSheetElement;
    };
    /**
     * Used to indicate and link to a charity's social page, or their own web site.
     */
    interface HTMLBiggiveSocialIconElement extends Components.BiggiveSocialIcon, HTMLStencilElement {
    }
    var HTMLBiggiveSocialIconElement: {
        prototype: HTMLBiggiveSocialIconElement;
        new (): HTMLBiggiveSocialIconElement;
    };
    interface HTMLBiggiveTabElement extends Components.BiggiveTab, HTMLStencilElement {
    }
    var HTMLBiggiveTabElement: {
        prototype: HTMLBiggiveTabElement;
        new (): HTMLBiggiveTabElement;
    };
    interface HTMLBiggiveTabbedContentElement extends Components.BiggiveTabbedContent, HTMLStencilElement {
    }
    var HTMLBiggiveTabbedContentElement: {
        prototype: HTMLBiggiveTabbedContentElement;
        new (): HTMLBiggiveTabbedContentElement;
    };
    interface HTMLBiggiveTableElement extends Components.BiggiveTable, HTMLStencilElement {
    }
    var HTMLBiggiveTableElement: {
        prototype: HTMLBiggiveTableElement;
        new (): HTMLBiggiveTableElement;
    };
    /**
     * Initially developed for use within the new donate stepper design. Currently has a hard-coded background
     * of $colour-grey-background, intened to appear transparent when used on a page with a matching background.
     * Please ensure input is styled as width: 100%.
     */
    interface HTMLBiggiveTextInputElement extends Components.BiggiveTextInput, HTMLStencilElement {
    }
    var HTMLBiggiveTextInputElement: {
        prototype: HTMLBiggiveTextInputElement;
        new (): HTMLBiggiveTextInputElement;
    };
    interface HTMLBiggiveTimelineElement extends Components.BiggiveTimeline, HTMLStencilElement {
    }
    var HTMLBiggiveTimelineElement: {
        prototype: HTMLBiggiveTimelineElement;
        new (): HTMLBiggiveTimelineElement;
    };
    interface HTMLBiggiveTimelineEntryElement extends Components.BiggiveTimelineEntry, HTMLStencilElement {
    }
    var HTMLBiggiveTimelineEntryElement: {
        prototype: HTMLBiggiveTimelineEntryElement;
        new (): HTMLBiggiveTimelineEntryElement;
    };
    interface HTMLBiggiveTotalizerElement extends Components.BiggiveTotalizer, HTMLStencilElement {
    }
    var HTMLBiggiveTotalizerElement: {
        prototype: HTMLBiggiveTotalizerElement;
        new (): HTMLBiggiveTotalizerElement;
    };
    interface HTMLBiggiveTotalizerTickerItemElement extends Components.BiggiveTotalizerTickerItem, HTMLStencilElement {
    }
    var HTMLBiggiveTotalizerTickerItemElement: {
        prototype: HTMLBiggiveTotalizerTickerItemElement;
        new (): HTMLBiggiveTotalizerTickerItemElement;
    };
    interface HTMLBiggiveVideoElement extends Components.BiggiveVideo, HTMLStencilElement {
    }
    var HTMLBiggiveVideoElement: {
        prototype: HTMLBiggiveVideoElement;
        new (): HTMLBiggiveVideoElement;
    };
    interface HTMLBiggiveVideoFeatureElement extends Components.BiggiveVideoFeature, HTMLStencilElement {
    }
    var HTMLBiggiveVideoFeatureElement: {
        prototype: HTMLBiggiveVideoFeatureElement;
        new (): HTMLBiggiveVideoFeatureElement;
    };
    interface HTMLElementTagNameMap {
        "biggive-accordion": HTMLBiggiveAccordionElement;
        "biggive-accordion-entry": HTMLBiggiveAccordionEntryElement;
        "biggive-article-card": HTMLBiggiveArticleCardElement;
        "biggive-back-to-top": HTMLBiggiveBackToTopElement;
        "biggive-basic-card": HTMLBiggiveBasicCardElement;
        "biggive-beneficiary-icon": HTMLBiggiveBeneficiaryIconElement;
        "biggive-biography-card": HTMLBiggiveBiographyCardElement;
        "biggive-boxed-content": HTMLBiggiveBoxedContentElement;
        "biggive-branded-image": HTMLBiggiveBrandedImageElement;
        "biggive-button": HTMLBiggiveButtonElement;
        "biggive-call-to-action": HTMLBiggiveCallToActionElement;
        "biggive-campaign-card": HTMLBiggiveCampaignCardElement;
        "biggive-campaign-card-filter-grid": HTMLBiggiveCampaignCardFilterGridElement;
        "biggive-campaign-highlights": HTMLBiggiveCampaignHighlightsElement;
        "biggive-carousel": HTMLBiggiveCarouselElement;
        "biggive-category-icon": HTMLBiggiveCategoryIconElement;
        "biggive-filtered-carousel": HTMLBiggiveFilteredCarouselElement;
        "biggive-footer": HTMLBiggiveFooterElement;
        "biggive-form": HTMLBiggiveFormElement;
        "biggive-form-field-select": HTMLBiggiveFormFieldSelectElement;
        "biggive-formatted-text": HTMLBiggiveFormattedTextElement;
        "biggive-generic-icon": HTMLBiggiveGenericIconElement;
        "biggive-grid": HTMLBiggiveGridElement;
        "biggive-heading": HTMLBiggiveHeadingElement;
        "biggive-hero-image": HTMLBiggiveHeroImageElement;
        "biggive-icon-button": HTMLBiggiveIconButtonElement;
        "biggive-icon-group": HTMLBiggiveIconGroupElement;
        "biggive-image": HTMLBiggiveImageElement;
        "biggive-image-button": HTMLBiggiveImageButtonElement;
        "biggive-image-feature": HTMLBiggiveImageFeatureElement;
        "biggive-main-menu": HTMLBiggiveMainMenuElement;
        "biggive-misc-icon": HTMLBiggiveMiscIconElement;
        "biggive-nav-group": HTMLBiggiveNavGroupElement;
        "biggive-nav-item": HTMLBiggiveNavItemElement;
        "biggive-page-column": HTMLBiggivePageColumnElement;
        "biggive-page-columns": HTMLBiggivePageColumnsElement;
        "biggive-page-section": HTMLBiggivePageSectionElement;
        "biggive-popup": HTMLBiggivePopupElement;
        "biggive-progress-bar": HTMLBiggiveProgressBarElement;
        "biggive-quote": HTMLBiggiveQuoteElement;
        "biggive-sheet": HTMLBiggiveSheetElement;
        "biggive-social-icon": HTMLBiggiveSocialIconElement;
        "biggive-tab": HTMLBiggiveTabElement;
        "biggive-tabbed-content": HTMLBiggiveTabbedContentElement;
        "biggive-table": HTMLBiggiveTableElement;
        "biggive-text-input": HTMLBiggiveTextInputElement;
        "biggive-timeline": HTMLBiggiveTimelineElement;
        "biggive-timeline-entry": HTMLBiggiveTimelineEntryElement;
        "biggive-totalizer": HTMLBiggiveTotalizerElement;
        "biggive-totalizer-ticker-item": HTMLBiggiveTotalizerTickerItemElement;
        "biggive-video": HTMLBiggiveVideoElement;
        "biggive-video-feature": HTMLBiggiveVideoFeatureElement;
    }
}
declare namespace LocalJSX {
    interface BiggiveAccordion {
        "headingColour"?: brandColour;
        "spaceBelow"?: spacingOption;
        "textColour"?: brandColour;
    }
    interface BiggiveAccordionEntry {
        "heading"?: string;
    }
    interface BiggiveArticleCard {
        "backgroundColour"?: brandColour;
        "backgroundImageUrl"?: string;
        "buttonColour"?: brandColour;
        "buttonLabel"?: string;
        "buttonUrl"?: string;
        "clipBottomLeftCorner"?: boolean;
        "clipTopRightCorner"?: boolean;
        "date"?: string;
        "dateColour"?: brandColour;
        "image1AltText"?: string;
        "image1Url"?: string;
        "image2AltText"?: string;
        "image2Url"?: string;
        "imageLabel"?: string;
        "imageLabelColour"?: brandColour;
        "mainImageAltText"?: string;
        "mainImageUrl"?: string;
        "mainTitle"?: string;
        "mainTitleColour"?: brandColour;
        "slug"?: string;
        "slugColour"?: brandColour;
        "spaceBelow"?: spacingOption;
    }
    interface BiggiveBackToTop {
    }
    interface BiggiveBasicCard {
        "addAnimation"?: boolean;
        "backgroundColour"?: brandColour;
        "backgroundImageUrl"?: string;
        "buttonAlign"?: string;
        "buttonColourScheme"?: string;
        "buttonLabel"?: string;
        "buttonStyle"?: string;
        "buttonUrl"?: string;
        "cardColour"?: brandColour;
        "clipBottomLeftCorner"?: boolean;
        "clipTopRightCorner"?: boolean;
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        "icon"?: boolean;
        "iconColour"?: brandColour;
        "mainImageAltText"?: string;
        "mainImageUrl"?: string;
        "mainTitle"?: string;
        "spaceBelow"?: spacingOption;
        "subtitle"?: string;
        "teaser"?: string;
        "textColour"?: brandColour;
    }
    interface BiggiveBeneficiaryIcon {
        /**
          * Background colour
         */
        "backgroundColour"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Background colour
         */
        "iconColour"?: string;
        /**
          * Label
         */
        "label"?: string;
        /**
          * Url
         */
        "url"?: string;
    }
    interface BiggiveBiographyCard {
        "backgroundColour"?: brandColour;
        "borderWidth"?: spacingOption;
        "circle"?: boolean;
        "fullName"?: string;
        "imageStyle"?: 'cover' | 'contain';
        "imageUrl"?: string;
        "jobTitle"?: string;
        "ratio"?: '1,1' | '1,1.5' | '1,2';
        "rounded"?: boolean;
        "spaceBelow"?: spacingOption;
        "textAlign"?: 'center' | 'left' | 'right';
        "textColour"?: brandColour;
        "url"?: string;
    }
    interface BiggiveBoxedContent {
        /**
          * Background colour
         */
        "backgroundColour"?: string;
        /**
          * Horizontal padding
         */
        "horizontalPadding"?: number;
        /**
          * Shadow
         */
        "shadow"?: boolean;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
        /**
          * Vertical padding
         */
        "verticalPadding"?: number;
    }
    interface BiggiveBrandedImage {
        /**
          * Charity location
         */
        "charityLocation"?: string;
        /**
          * Charity name
         */
        "charityName"?: string;
        /**
          * Link to the charity's website
          * @deprecated We should stop passing this soon, and will link to charity URLs alongside socials.
         */
        "charityUrl"?: string;
        /**
          * Full URL of a image.
         */
        "imageUrl"?: string;
        /**
          * Full URL of the logo.
         */
        "logoUrl"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggiveButton {
        "buttonId"?: undefined | string;
        /**
          * Centered
         */
        "centered"?: boolean;
        /**
          * Colour Scheme
         */
        "colourScheme"?: string;
        /**
          * Display full width
         */
        "fullWidth"?: boolean;
        /**
          * Text
         */
        "label"?: string;
        "onDoButtonClick"?: (event: BiggiveButtonCustomEvent<{ event: object; url: string }>) => void;
        /**
          * New Tab
         */
        "openInNewTab"?: boolean;
        /**
          * Rounded corners
         */
        "rounded"?: boolean;
        /**
          * Size
         */
        "size"?: string;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
        /**
          * URL
         */
        "url"?: string;
    }
    interface BiggiveCallToAction {
        /**
          * Default text colour
         */
        "defaultTextColour"?: string;
        /**
          * Main title
         */
        "mainTitle"?: string;
        /**
          * Main title colour
         */
        "mainTitleColour"?: string;
        /**
          * Main title size
         */
        "mainTitleSize"?: number;
        /**
          * Primary button Colour Scheme
         */
        "primaryButtonColourScheme"?: string;
        /**
          * Primary button Label
         */
        "primaryButtonLabel"?: string;
        /**
          * Primary button Url
         */
        "primaryButtonUrl"?: string;
        /**
          * Secondary button Colour Scheme
         */
        "secondaryButtonColourScheme"?: string;
        /**
          * Secondary button Label
         */
        "secondaryButtonLabel"?: string;
        /**
          * Secondary button Url
         */
        "secondaryButtonUrl"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Slug colour
         */
        "slugColour"?: string;
        /**
          * Slug size
         */
        "slugSize"?: number;
        /**
          * Space above component
         */
        "spaceAbove"?: number;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
        /**
          * Subtitle
         */
        "subtitle"?: string;
        /**
          * Subtitle colour
         */
        "subtitleColour"?: string;
        /**
          * Main title size
         */
        "subtitleSize"?: number;
        /**
          * Teaser
         */
        "teaser"?: string;
        /**
          * Teaser colour
         */
        "teaserColour"?: string;
    }
    interface BiggiveCampaignCard {
        /**
          * Full URL of a banner image.
         */
        "banner"?: string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle"?: string;
        /**
          * e.g. "Match Funded".
         */
        "campaignType"?: string;
        /**
          * To be used alongside isFutureCampaign = true or isPastCampaign = true. If either is true, we render out: 'Launches: ' + datetime or 'Closed: ' + datetime. Preferred format: DD/MM/YYYY, HH:MM DON-661.
         */
        "datetime"?: string;
        /**
          * Donate button colour scheme
         */
        "donateButtonColourScheme"?: string;
        /**
          * Donate button label
         */
        "donateButtonLabel"?: string;
        /**
          * Donate button url
         */
        "donateButtonUrl"?: string;
        /**
          * Boolean flag telling the component if the campaign is in the future (not open yet).
         */
        "isFutureCampaign"?: boolean;
        /**
          * Boolean flag telling the component if the campaign is in the future (not open yet).
         */
        "isPastCampaign"?: boolean;
        /**
          * Donate button colour scheme
         */
        "moreInfoButtonColourScheme"?: string;
        /**
          * More information button label
         */
        "moreInfoButtonLabel"?: string;
        /**
          * More information button url
         */
        "moreInfoButtonUrl"?: string;
        "onDoCardGeneralClick"?: (event: BiggiveCampaignCardCustomEvent<{ event: object; url: string }>) => void;
        /**
          * Display name of the charity or non-profit.
         */
        "organisationName"?: string;
        /**
          * Amount for the primary figure, formatted with currency symbol
         */
        "primaryFigureAmount"?: string;
        /**
          * Label for the primary figure
         */
        "primaryFigureLabel"?: string;
        /**
          * Progress bar percentage
         */
        "progressBarCounter"?: number;
        /**
          * Amount for the secondary figure, formatted with currency symbol
         */
        "secondaryFigureAmount"?: string;
        /**
          * Label for the secondary figure
         */
        "secondaryFigureLabel"?: string;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggiveCampaignCardFilterGrid {
        /**
          * JSON array of beneficiary key/values, or takes a stringified equiavalent (for Storybook)
         */
        "beneficiaryOptions"?: string | Record<string, string>;
        /**
          * Defines the text on the search button
         */
        "buttonText"?: string;
        /**
          * JSON array of category key/values, or takes a stringified equiavalent (for Storybook)
         */
        "categoryOptions"?: string | Record<string, string>;
        /**
          * JSON array of funding key/values, or takes a stringified equiavalent (for Storybook)
         */
        "fundingOptions"?: string | Record<string, string>;
        /**
          * Intro
         */
        "intro"?: string;
        /**
          * JSON array of location key/values, or takes a stringified equiavalent (for Storybook)
         */
        "locationOptions"?: string | Record<string, string>;
        /**
          * This event `doSearchAndFilterUpdate` event is emitted and propogates to the parent component which handles it
         */
        "onDoSearchAndFilterUpdate"?: (event: BiggiveCampaignCardFilterGridCustomEvent<{
    searchText: string | null;
    sortBy: string | null;
    filterCategory: string | null;
    filterBeneficiary: string | null;
    filterLocation: string | null;
    filterFunding: string | null;
  }>) => void;
        /**
          * Defines the text displayed as the placeholder in the input field before the user types anything
         */
        "placeholderText"?: string;
        /**
          * Optional search text prop. Useful for pre-populating the search field when the page is loaded with a search term already existing in the URL. This can happen when sharing links, or if a donor goes to a campaign page after searching, and then returns to the search results. In such a case, the search box text will clear, unless we use this prop to populate it on rendering. DON-652.
         */
        "searchText"?: string | null;
        /**
          * For injecting the chosen beneficiary to filter by, as per the comment above for `selectedSortByOption`.
         */
        "selectedFilterBeneficiary"?: string | null;
        /**
          * For injecting the chosen category to filter by, as per the comment above for `selectedSortByOption`.
         */
        "selectedFilterCategory"?: string | null;
        /**
          * For injecting the chosen funding to filter by, as per the comment above for `selectedSortByOption`.
         */
        "selectedFilterFunding"?: string | null;
        /**
          * For injecting the chosen location to filter by, as per the comment above for `selectedSortByOption`.
         */
        "selectedFilterLocation"?: string | null;
        /**
          * This helps us inject a pre-selected dropdown value from outside of this component. This is especially helpful for the Meta campaign and Explore pages, where searching by text wipes out previous sort options and re-uses Relevance, or where one of those two pages is loaded directly with URL parameters - in such a scenario the dropdown shows that it's pre-selected. DON-558.
         */
        "selectedSortByOption"?: 'Most raised' | 'Match funds remaining' | 'Relevance';
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggiveCampaignHighlights {
        /**
          * Full URL of a banner image.
         */
        "banner"?: string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle"?: string;
        /**
          * Champion's name
         */
        "championName"?: string;
        /**
          * Link to all meta-campaigns funded by this champion. For example: /christmas-challenge-2022/the-reed-foundation-22 In other words, it follows the following format: '/' + campaign.parentRef + '/' + campaign.championRef
         */
        "championUrl"?: string;
        /**
          * Amount for the primary figure, formatted with currency symbol
         */
        "primaryFigureAmount"?: string;
        /**
          * Label for the primary figure
         */
        "primaryFigureLabel"?: string;
        /**
          * Primary stat icon
         */
        "primaryStatIcon"?: string;
        /**
          * Primary stat text
         */
        "primaryStatText"?: string;
        /**
          * Progress bar percentage
         */
        "progressBarCounter"?: number;
        /**
          * Amount for the secondary figure, formatted with currency symbol
         */
        "secondaryFigureAmount"?: string;
        /**
          * Label for the secondary figure
         */
        "secondaryFigureLabel"?: string;
        /**
          * Secondary stat icon
         */
        "secondaryStatIcon"?: string;
        /**
          * Secondary stat text
         */
        "secondaryStatText"?: string;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggiveCarousel {
        "buttonBackgroundColour"?: brandColour;
        "buttonIconColour"?: brandColour;
        "columnCount"?: 1 | 2 | 3 | 4 | 5;
        "spaceBelow"?: spacingOption;
    }
    interface BiggiveCategoryIcon {
        /**
          * Background colour
         */
        "backgroundColour"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Background colour
         */
        "iconColour"?: string;
        /**
          * Label
         */
        "label"?: string;
        /**
          * Url
         */
        "url"?: string;
    }
    interface BiggiveFilteredCarousel {
        "buttonBackgroundColour"?: brandColour;
        "buttonIconColour"?: brandColour;
        "columnCount"?: 1 | 2 | 3 | 4 | 5;
        "spaceBelow"?: spacingOption;
    }
    interface BiggiveFooter {
        /**
          * URL prefixes vary by environment, and components library is not best placed to know what they are, so we take them as props
         */
        "blogUrlPrefix"?: string | undefined;
        "experienceUrlPrefix"?: string | undefined;
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * Conditionally render footer menu: hard-coded (preset) when set to true, dynamic (slot-based) when set to false
         */
        "usePresetFooter"?: boolean;
    }
    interface BiggiveForm {
    }
    interface BiggiveFormFieldSelect {
        /**
          * Must match background of containing element, or unintended shape will appear.
         */
        "backgroundColour"?: 'white' | 'grey';
        "onSelectionChange"?: (value: string) => void;
        /**
          * JSON array of category key/values, or takes a stringified equiavalent (for Storybook)
         */
        "options": string | Record<string, string>;
        /**
          * Placeholder
         */
        "placeholder"?: string | undefined;
        /**
          * Displayed as 'eyebrow' label over the top border of the box.
         */
        "prompt": string | null;
        "selectStyle"?: 'bordered' | 'underlined';
        "selectedLabel"?: string | null;
        "selectedValue"?: string | null;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggiveFormattedText {
        /**
          * Default text colour
         */
        "defaultTextColour"?: string;
        /**
          * Width
         */
        "maxWidth"?: number;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggiveGenericIcon {
        "backgroundColour"?: brandColour;
        "icon"?: string;
        "iconColour"?: brandColour;
        "iconGroup"?: 'beneficiary' | 'misc' | 'social' | 'category';
        "url"?: string;
    }
    interface BiggiveGrid {
        "columnCount"?: number;
        "columnGap"?: spacingOption;
        "spaceBelow"?: number;
        /**
          * Deprecated - should use columGap Instead
         */
        "spaceBetween"?: boolean;
    }
    interface BiggiveHeading {
        "align"?: string;
        "colour"?: brandColour;
        "htmlElement"?: headingTag;
        "icon"?: boolean;
        "iconColour"?: brandColour;
        "size"?: headingSize;
        "spaceAbove"?: spacingOption;
        "spaceBelow"?: spacingOption;
        "text"?: string;
    }
    interface BiggiveHeroImage {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme"?: brandColour;
        /**
          * Button Label
         */
        "buttonLabel"?: string;
        /**
          * Button Url
         */
        "buttonUrl"?: string;
        /**
          * Colour Scheme
         */
        "colourScheme"?: brandColour;
        /**
          * Full URL of a logo image.
         */
        "logo"?: string;
        /**
          * Logo alt text
         */
        "logoAltText"?: string;
        /**
          * Logo container height selection. Numbers are not measurements.
         */
        "logoHeight"?: 1|2|3|4|5|6|7|8|9|10;
        /**
          * Full URL of a main hero image.
         */
        "mainImage"?: string|null;
        /**
          * Horizontal alignment of image
         */
        "mainImageAlignHorizontal"?: string;
        /**
          * Vertical alignment of image
         */
        "mainImageAlignVertical"?: string;
        /**
          * Hero image title, typically the page.
         */
        "mainTitle"?: string;
        /**
          * Main title colour
         */
        "mainTitleColour"?: brandColour;
        /**
          * Header slug
         */
        "slug"?: string;
        /**
          * Header slug colour
         */
        "slugColour"?: brandColour;
        /**
          * Space below component
         */
        "spaceBelow"?: spacingOption;
        /**
          * Introductory teaser text
         */
        "teaser"?: string;
        /**
          * Teaser colour
         */
        "teaserColour"?: brandColour;
    }
    interface BiggiveIconButton {
        "arrow"?: boolean;
        "arrowColour"?: brandColour;
        "backgroundColour"?: brandColour;
        "backgroundPadding"?: spacingOption;
        "buttonId"?: undefined | string;
        "centered"?: boolean;
        "circle"?: boolean;
        "icon"?: string;
        "iconGroup"?: 'beneficiary' | 'misc' | 'social' | 'category';
        "onDoButtonClick"?: (event: BiggiveIconButtonCustomEvent<{ event: object; url: string }>) => void;
        "openInNewTab"?: boolean;
        "rounded"?: boolean;
        "shadow"?: boolean;
        "size"?: 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
        "spaceBelow"?: spacingOption;
        "text"?: string;
        "textColour"?: brandColour;
        "url"?: string;
    }
    interface BiggiveIconGroup {
        /**
          * Label
         */
        "label"?: string;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggiveImage {
        /**
          * Image width
         */
        "height"?: number;
        /**
          * Image alt text tag.
         */
        "imageAltText"?: string;
        /**
          * Full URL of a image.
         */
        "imageUrl"?: string;
        /**
          * Size unit
         */
        "sizeUnit"?: string;
        /**
          * Space above component
         */
        "spaceAbove"?: number;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
        /**
          * Image width
         */
        "width"?: number;
    }
    interface BiggiveImageButton {
        "arrow"?: boolean;
        "arrowColour"?: brandColour;
        "backgroundColour"?: brandColour;
        "backgroundPadding"?: spacingOption;
        "buttonId"?: undefined | string;
        "centered"?: boolean;
        "circle"?: boolean;
        "imageStyle"?: string;
        "imageUrl"?: string;
        "onDoButtonClick"?: (event: BiggiveImageButtonCustomEvent<{ event: object; url: string }>) => void;
        "openInNewTab"?: boolean;
        "rounded"?: boolean;
        "shadow"?: boolean;
        "size"?: 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
        "spaceBelow"?: spacingOption;
        "text"?: string;
        "textColour"?: brandColour;
        "url"?: string;
    }
    interface BiggiveImageFeature {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme"?: string;
        /**
          * Button Label
         */
        "buttonLabel"?: string;
        /**
          * Button Url
         */
        "buttonUrl"?: string;
        /**
          * Default text colour
         */
        "defaultTextColour"?: string;
        /**
          * Image alt text tag.
         */
        "imageAltText"?: string;
        /**
          * Full URL of a image.
         */
        "imageUrl"?: string;
        /**
          * Video title
         */
        "mainTitle"?: string;
        /**
          * Slug colour
         */
        "mainTitleColour"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Slug colour
         */
        "slugColour"?: string;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
        /**
          * Introductory teaser text
         */
        "teaser"?: string;
        /**
          * Teaser colour
         */
        "teaserColour"?: string;
    }
    interface BiggiveMainMenu {
        "blogUrlPrefix"?: string | undefined;
        /**
          * E.g. "https://donate.thebiggive.org.uk" for production (currently)
         */
        "donateUrlPrefix"?: string | undefined;
        "experienceUrlPrefix"?: string | undefined;
        /**
          * Whether the current user is logged in (i.e. is assumed to have a valid JWT). They get links to some extra content if they are.
         */
        "isLoggedIn"?: boolean;
        "logoUrl"?: string;
        /**
          * If true, content passed in via slots will be ignored, and this will just render a hard-coded menu that's the same everywhere. When BG2-2286 is done this will be permantly true and the prop will be deleted.
         */
        "usePresetMenuContent"?: boolean;
    }
    interface BiggiveMiscIcon {
        /**
          * Background colour
         */
        "backgroundColour"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Background colour
         */
        "iconColour"?: string;
        /**
          * Url
         */
        "url"?: string;
    }
    interface BiggiveNavGroup {
        /**
          * Inline
         */
        "inline"?: boolean;
    }
    interface BiggiveNavItem {
        /**
          * URL
         */
        "iconColour"?: string;
        /**
          * Label
         */
        "label"?: string;
        /**
          * URL
         */
        "url"?: string;
    }
    interface BiggivePageColumn {
    }
    interface BiggivePageColumns {
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggivePageSection {
        /**
          * Colour scheme
         */
        "colourScheme"?: string;
        /**
          * Width
         */
        "maxWidth"?: number;
        /**
          * Bleeds the primary brand colour to the left and right edge of the viewport, even if used within a containing block element.
         */
        "primaryFullBleed"?: boolean;
        /**
          * Section style bottom
         */
        "sectionStyleBottom"?: string;
        /**
          * Section style top
         */
        "sectionStyleTop"?: string;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggivePopup {
    }
    interface BiggiveProgressBar {
        /**
          * Colour Scheme
         */
        "colourScheme"?: string;
        /**
          * Percentage to show + use for CSS width; round before input if desired
         */
        "counter"?: number;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggiveQuote {
        "attribution"?: string;
        "defaultTextColour"?: brandColour;
        "quote"?: string;
        "quoteIconColour"?: brandColour;
        "spaceBelow"?: spacingOption;
    }
    interface BiggiveSheet {
        "backgroundColour"?: brandColour;
        /**
          * A string ID (no spaces) unique within the page context, used to trigger the opening of the sheet from an anchor hash.
         */
        "sheetId"?: string;
        "textColour"?: brandColour;
    }
    /**
     * Used to indicate and link to a charity's social page, or their own web site.
     */
    interface BiggiveSocialIcon {
        /**
          * Background colour
         */
        "backgroundColour"?: string;
        /**
          * Icon colour
         */
        "iconColour"?: string;
        /**
          * Used within accessible labels for links. Typically a charity name or "Big Give". Can also be "Share".
         */
        "labelPrefix"?: string;
        /**
          * Service name
         */
        "service": 'Facebook' | 'Instagram' | 'LinkedIn' | 'Twitter' | 'Web' | 'Whatsapp' | 'YouTube';
        /**
          * Url
         */
        "url"?: string;
        /**
          * Used in the social icons in the biggive-footer, which are more spaced out than others across the site. COM-43.
         */
        "wide"?: boolean;
    }
    interface BiggiveTab {
        "tabTitle"?: string;
    }
    interface BiggiveTabbedContent {
        "buttonBackgroundColour"?: brandColour;
        "buttonIconColour"?: brandColour;
        "navigationHighlightColour"?: brandColour;
        "selectedNavigationHighlightColour"?: brandColour;
        "selectedTextColour"?: brandColour;
        "spaceBelow"?: spacingOption;
        "textColour"?: brandColour;
    }
    interface BiggiveTable {
        "bodyBackgroundColour"?: brandColour;
        "bodyTextColour"?: brandColour;
        "headerBackgroundColour"?: brandColour;
        "headerTextColour"?: brandColour;
        "spaceBelow"?: spacingOption;
    }
    /**
     * Initially developed for use within the new donate stepper design. Currently has a hard-coded background
     * of $colour-grey-background, intened to appear transparent when used on a page with a matching background.
     * Please ensure input is styled as width: 100%.
     */
    interface BiggiveTextInput {
        /**
          * ISO-4217 currency code if input is for a money value
         */
        "currency"?: 'GBP' | 'USD' | undefined;
        /**
          * Displayed as 'eyebrow' label over the top border of the box.
         */
        "prompt": string;
        "selectStyle"?: 'bordered' | 'underlined';
        "spaceBelow"?: number;
        "value": string;
    }
    interface BiggiveTimeline {
        "buttonBackgroundColour"?: brandColour;
        "buttonIconColour"?: brandColour;
        "entryBackgroundColour"?: brandColour;
        "entryDateColour"?: brandColour;
        "entryHighlightColour"?: brandColour;
        "entryTextColour"?: brandColour;
        "entryTitleColour"?: brandColour;
        "navigationHighlightColour"?: brandColour;
        "selectedNavigationHighlightColour"?: brandColour;
        "selectedTextColour"?: brandColour;
        "spaceBelow"?: spacingOption;
        "textColour"?: brandColour;
    }
    interface BiggiveTimelineEntry {
        /**
          * Should be in the format 'YYYY-mm-dd', for example '2023-01-01'
         */
        "date"?: string;
        "heading"?: string;
    }
    interface BiggiveTotalizer {
        /**
          * Primary message
         */
        "mainMessage"?: string;
        /**
          * Primary banner colour
         */
        "primaryColour"?: string;
        /**
          * Primary text colour
         */
        "primaryTextColour"?: string;
        /**
          * Secondary banner colour
         */
        "secondaryColour"?: string;
        /**
          * Secondary text colour
         */
        "secondaryTextColour"?: string;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
    }
    interface BiggiveTotalizerTickerItem {
        /**
          * Figure
         */
        "figure"?: string;
        /**
          * Figure
         */
        "label"?: string;
    }
    interface BiggiveVideo {
        /**
          * Space above component
         */
        "spaceAbove"?: number;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
        /**
          * Full URL of a video.
         */
        "videoUrl"?: string;
    }
    interface BiggiveVideoFeature {
        /**
          * Button Colour Scheme
         */
        "buttonColourScheme"?: string;
        /**
          * Button Label
         */
        "buttonLabel"?: string;
        /**
          * Button Url
         */
        "buttonUrl"?: string;
        /**
          * Default text colour
         */
        "defaultTextColour"?: string;
        /**
          * Video title
         */
        "mainTitle"?: string;
        /**
          * Slug colour
         */
        "mainTitleColour"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Slug colour
         */
        "slugColour"?: string;
        /**
          * Space above component
         */
        "spaceAbove"?: number;
        /**
          * Space below component
         */
        "spaceBelow"?: number;
        /**
          * Introductory teaser text
         */
        "teaser"?: string;
        /**
          * Teaser colour
         */
        "teaserColour"?: string;
        /**
          * Full URL of a video.
         */
        "videoUrl"?: string;
    }
    interface IntrinsicElements {
        "biggive-accordion": BiggiveAccordion;
        "biggive-accordion-entry": BiggiveAccordionEntry;
        "biggive-article-card": BiggiveArticleCard;
        "biggive-back-to-top": BiggiveBackToTop;
        "biggive-basic-card": BiggiveBasicCard;
        "biggive-beneficiary-icon": BiggiveBeneficiaryIcon;
        "biggive-biography-card": BiggiveBiographyCard;
        "biggive-boxed-content": BiggiveBoxedContent;
        "biggive-branded-image": BiggiveBrandedImage;
        "biggive-button": BiggiveButton;
        "biggive-call-to-action": BiggiveCallToAction;
        "biggive-campaign-card": BiggiveCampaignCard;
        "biggive-campaign-card-filter-grid": BiggiveCampaignCardFilterGrid;
        "biggive-campaign-highlights": BiggiveCampaignHighlights;
        "biggive-carousel": BiggiveCarousel;
        "biggive-category-icon": BiggiveCategoryIcon;
        "biggive-filtered-carousel": BiggiveFilteredCarousel;
        "biggive-footer": BiggiveFooter;
        "biggive-form": BiggiveForm;
        "biggive-form-field-select": BiggiveFormFieldSelect;
        "biggive-formatted-text": BiggiveFormattedText;
        "biggive-generic-icon": BiggiveGenericIcon;
        "biggive-grid": BiggiveGrid;
        "biggive-heading": BiggiveHeading;
        "biggive-hero-image": BiggiveHeroImage;
        "biggive-icon-button": BiggiveIconButton;
        "biggive-icon-group": BiggiveIconGroup;
        "biggive-image": BiggiveImage;
        "biggive-image-button": BiggiveImageButton;
        "biggive-image-feature": BiggiveImageFeature;
        "biggive-main-menu": BiggiveMainMenu;
        "biggive-misc-icon": BiggiveMiscIcon;
        "biggive-nav-group": BiggiveNavGroup;
        "biggive-nav-item": BiggiveNavItem;
        "biggive-page-column": BiggivePageColumn;
        "biggive-page-columns": BiggivePageColumns;
        "biggive-page-section": BiggivePageSection;
        "biggive-popup": BiggivePopup;
        "biggive-progress-bar": BiggiveProgressBar;
        "biggive-quote": BiggiveQuote;
        "biggive-sheet": BiggiveSheet;
        "biggive-social-icon": BiggiveSocialIcon;
        "biggive-tab": BiggiveTab;
        "biggive-tabbed-content": BiggiveTabbedContent;
        "biggive-table": BiggiveTable;
        "biggive-text-input": BiggiveTextInput;
        "biggive-timeline": BiggiveTimeline;
        "biggive-timeline-entry": BiggiveTimelineEntry;
        "biggive-totalizer": BiggiveTotalizer;
        "biggive-totalizer-ticker-item": BiggiveTotalizerTickerItem;
        "biggive-video": BiggiveVideo;
        "biggive-video-feature": BiggiveVideoFeature;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "biggive-accordion": LocalJSX.BiggiveAccordion & JSXBase.HTMLAttributes<HTMLBiggiveAccordionElement>;
            "biggive-accordion-entry": LocalJSX.BiggiveAccordionEntry & JSXBase.HTMLAttributes<HTMLBiggiveAccordionEntryElement>;
            "biggive-article-card": LocalJSX.BiggiveArticleCard & JSXBase.HTMLAttributes<HTMLBiggiveArticleCardElement>;
            "biggive-back-to-top": LocalJSX.BiggiveBackToTop & JSXBase.HTMLAttributes<HTMLBiggiveBackToTopElement>;
            "biggive-basic-card": LocalJSX.BiggiveBasicCard & JSXBase.HTMLAttributes<HTMLBiggiveBasicCardElement>;
            "biggive-beneficiary-icon": LocalJSX.BiggiveBeneficiaryIcon & JSXBase.HTMLAttributes<HTMLBiggiveBeneficiaryIconElement>;
            "biggive-biography-card": LocalJSX.BiggiveBiographyCard & JSXBase.HTMLAttributes<HTMLBiggiveBiographyCardElement>;
            "biggive-boxed-content": LocalJSX.BiggiveBoxedContent & JSXBase.HTMLAttributes<HTMLBiggiveBoxedContentElement>;
            "biggive-branded-image": LocalJSX.BiggiveBrandedImage & JSXBase.HTMLAttributes<HTMLBiggiveBrandedImageElement>;
            "biggive-button": LocalJSX.BiggiveButton & JSXBase.HTMLAttributes<HTMLBiggiveButtonElement>;
            "biggive-call-to-action": LocalJSX.BiggiveCallToAction & JSXBase.HTMLAttributes<HTMLBiggiveCallToActionElement>;
            "biggive-campaign-card": LocalJSX.BiggiveCampaignCard & JSXBase.HTMLAttributes<HTMLBiggiveCampaignCardElement>;
            "biggive-campaign-card-filter-grid": LocalJSX.BiggiveCampaignCardFilterGrid & JSXBase.HTMLAttributes<HTMLBiggiveCampaignCardFilterGridElement>;
            "biggive-campaign-highlights": LocalJSX.BiggiveCampaignHighlights & JSXBase.HTMLAttributes<HTMLBiggiveCampaignHighlightsElement>;
            "biggive-carousel": LocalJSX.BiggiveCarousel & JSXBase.HTMLAttributes<HTMLBiggiveCarouselElement>;
            "biggive-category-icon": LocalJSX.BiggiveCategoryIcon & JSXBase.HTMLAttributes<HTMLBiggiveCategoryIconElement>;
            "biggive-filtered-carousel": LocalJSX.BiggiveFilteredCarousel & JSXBase.HTMLAttributes<HTMLBiggiveFilteredCarouselElement>;
            "biggive-footer": LocalJSX.BiggiveFooter & JSXBase.HTMLAttributes<HTMLBiggiveFooterElement>;
            "biggive-form": LocalJSX.BiggiveForm & JSXBase.HTMLAttributes<HTMLBiggiveFormElement>;
            "biggive-form-field-select": LocalJSX.BiggiveFormFieldSelect & JSXBase.HTMLAttributes<HTMLBiggiveFormFieldSelectElement>;
            "biggive-formatted-text": LocalJSX.BiggiveFormattedText & JSXBase.HTMLAttributes<HTMLBiggiveFormattedTextElement>;
            "biggive-generic-icon": LocalJSX.BiggiveGenericIcon & JSXBase.HTMLAttributes<HTMLBiggiveGenericIconElement>;
            "biggive-grid": LocalJSX.BiggiveGrid & JSXBase.HTMLAttributes<HTMLBiggiveGridElement>;
            "biggive-heading": LocalJSX.BiggiveHeading & JSXBase.HTMLAttributes<HTMLBiggiveHeadingElement>;
            "biggive-hero-image": LocalJSX.BiggiveHeroImage & JSXBase.HTMLAttributes<HTMLBiggiveHeroImageElement>;
            "biggive-icon-button": LocalJSX.BiggiveIconButton & JSXBase.HTMLAttributes<HTMLBiggiveIconButtonElement>;
            "biggive-icon-group": LocalJSX.BiggiveIconGroup & JSXBase.HTMLAttributes<HTMLBiggiveIconGroupElement>;
            "biggive-image": LocalJSX.BiggiveImage & JSXBase.HTMLAttributes<HTMLBiggiveImageElement>;
            "biggive-image-button": LocalJSX.BiggiveImageButton & JSXBase.HTMLAttributes<HTMLBiggiveImageButtonElement>;
            "biggive-image-feature": LocalJSX.BiggiveImageFeature & JSXBase.HTMLAttributes<HTMLBiggiveImageFeatureElement>;
            "biggive-main-menu": LocalJSX.BiggiveMainMenu & JSXBase.HTMLAttributes<HTMLBiggiveMainMenuElement>;
            "biggive-misc-icon": LocalJSX.BiggiveMiscIcon & JSXBase.HTMLAttributes<HTMLBiggiveMiscIconElement>;
            "biggive-nav-group": LocalJSX.BiggiveNavGroup & JSXBase.HTMLAttributes<HTMLBiggiveNavGroupElement>;
            "biggive-nav-item": LocalJSX.BiggiveNavItem & JSXBase.HTMLAttributes<HTMLBiggiveNavItemElement>;
            "biggive-page-column": LocalJSX.BiggivePageColumn & JSXBase.HTMLAttributes<HTMLBiggivePageColumnElement>;
            "biggive-page-columns": LocalJSX.BiggivePageColumns & JSXBase.HTMLAttributes<HTMLBiggivePageColumnsElement>;
            "biggive-page-section": LocalJSX.BiggivePageSection & JSXBase.HTMLAttributes<HTMLBiggivePageSectionElement>;
            "biggive-popup": LocalJSX.BiggivePopup & JSXBase.HTMLAttributes<HTMLBiggivePopupElement>;
            "biggive-progress-bar": LocalJSX.BiggiveProgressBar & JSXBase.HTMLAttributes<HTMLBiggiveProgressBarElement>;
            "biggive-quote": LocalJSX.BiggiveQuote & JSXBase.HTMLAttributes<HTMLBiggiveQuoteElement>;
            "biggive-sheet": LocalJSX.BiggiveSheet & JSXBase.HTMLAttributes<HTMLBiggiveSheetElement>;
            /**
             * Used to indicate and link to a charity's social page, or their own web site.
             */
            "biggive-social-icon": LocalJSX.BiggiveSocialIcon & JSXBase.HTMLAttributes<HTMLBiggiveSocialIconElement>;
            "biggive-tab": LocalJSX.BiggiveTab & JSXBase.HTMLAttributes<HTMLBiggiveTabElement>;
            "biggive-tabbed-content": LocalJSX.BiggiveTabbedContent & JSXBase.HTMLAttributes<HTMLBiggiveTabbedContentElement>;
            "biggive-table": LocalJSX.BiggiveTable & JSXBase.HTMLAttributes<HTMLBiggiveTableElement>;
            /**
             * Initially developed for use within the new donate stepper design. Currently has a hard-coded background
             * of $colour-grey-background, intened to appear transparent when used on a page with a matching background.
             * Please ensure input is styled as width: 100%.
             */
            "biggive-text-input": LocalJSX.BiggiveTextInput & JSXBase.HTMLAttributes<HTMLBiggiveTextInputElement>;
            "biggive-timeline": LocalJSX.BiggiveTimeline & JSXBase.HTMLAttributes<HTMLBiggiveTimelineElement>;
            "biggive-timeline-entry": LocalJSX.BiggiveTimelineEntry & JSXBase.HTMLAttributes<HTMLBiggiveTimelineEntryElement>;
            "biggive-totalizer": LocalJSX.BiggiveTotalizer & JSXBase.HTMLAttributes<HTMLBiggiveTotalizerElement>;
            "biggive-totalizer-ticker-item": LocalJSX.BiggiveTotalizerTickerItem & JSXBase.HTMLAttributes<HTMLBiggiveTotalizerTickerItemElement>;
            "biggive-video": LocalJSX.BiggiveVideo & JSXBase.HTMLAttributes<HTMLBiggiveVideoElement>;
            "biggive-video-feature": LocalJSX.BiggiveVideoFeature & JSXBase.HTMLAttributes<HTMLBiggiveVideoFeatureElement>;
        }
    }
}
