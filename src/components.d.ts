/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { spacingOption } from "./globals/spacing-option";
import { brandColour } from "./globals/brand-colour";
import { sortOptionLabel } from "./components/biggive-campaign-card-filter-grid/biggive-campaign-card-filter-grid";
import { headingTag } from "./globals/heading-tag";
import { headingSize } from "./globals/heading-size";
import { sectionStyle } from "./components/biggive-page-section/biggive-page-section-prop-types";
export { spacingOption } from "./globals/spacing-option";
export { brandColour } from "./globals/brand-colour";
export { sortOptionLabel } from "./components/biggive-campaign-card-filter-grid/biggive-campaign-card-filter-grid";
export { headingTag } from "./globals/heading-tag";
export { headingSize } from "./globals/heading-size";
export { sectionStyle } from "./components/biggive-page-section/biggive-page-section-prop-types";
export namespace Components {
    interface BiggiveAccordion {
        /**
          * @default 'primary'
         */
        "headingColour": brandColour;
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
        /**
          * @default 'black'
         */
        "textColour": brandColour;
    }
    interface BiggiveAccordionEntry {
        /**
          * @default ''
         */
        "heading": string;
    }
    interface BiggiveArticleCard {
        /**
          * @default 'white'
         */
        "backgroundColour": brandColour;
        /**
          * @default ''
         */
        "backgroundImageUrl": string;
        /**
          * @default 'black'
         */
        "buttonColour": brandColour;
        "buttonLabel": string;
        "buttonUrl": string;
        /**
          * @default true
         */
        "clipBottomLeftCorner": boolean;
        /**
          * @default true
         */
        "clipTopRightCorner": boolean;
        "date": string;
        /**
          * @default 'black'
         */
        "dateColour": brandColour;
        "image1AltText": string;
        "image1Url": string;
        "image2AltText": string;
        "image2Url": string;
        "imageLabel": string;
        /**
          * @default 'black'
         */
        "imageLabelColour": brandColour;
        "mainImageAltText": string;
        "mainImageUrl": string;
        "mainTitle": string;
        /**
          * @default 'black'
         */
        "mainTitleColour": brandColour;
        "slug": string;
        /**
          * @default 'black'
         */
        "slugColour": brandColour;
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
    }
    interface BiggiveBackToTop {
    }
    interface BiggiveBasicCard {
        /**
          * @default false
         */
        "addAnimation": boolean;
        /**
          * @default ''
         */
        "author": string;
        /**
          * @default 'primary'
         */
        "backgroundColour": brandColour;
        /**
          * @default ''
         */
        "backgroundImageUrl": string;
        /**
          * @default 'center'
         */
        "buttonAlign": string;
        /**
          * @default 'clear-primary'
         */
        "buttonColourScheme": string;
        "buttonLabel": string;
        /**
          * @default 'standard'
         */
        "buttonStyle": string;
        "buttonUrl": string;
        /**
          * @default 'white'
         */
        "cardColour": brandColour;
        /**
          * @default true
         */
        "clipBottomLeftCorner": boolean;
        /**
          * @default true
         */
        "clipTopRightCorner": boolean;
        /**
          * @default ''
         */
        "date": string;
        /**
          * @default 3
         */
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default true
         */
        "icon": boolean;
        /**
          * @default 'primary'
         */
        "iconColour": brandColour;
        "mainImageAltText": string;
        /**
          * @default undefined
         */
        "mainImageUrl"?: string;
        "mainTitle": string;
        /**
          * @default 'biggive'
         */
        "siteDesign": 'biggive' | 'philco';
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
        /**
          * @default ''
         */
        "subtitle": string;
        "teaser": string;
        /**
          * @default 'black'
         */
        "textColour": brandColour;
    }
    interface BiggiveBiographyCard {
        /**
          * @default 'white'
         */
        "backgroundColour": brandColour;
        /**
          * @default 0
         */
        "borderWidth": spacingOption;
        /**
          * @default false
         */
        "circle": boolean;
        /**
          * @default 'light'
         */
        "circleColour": 'light' | 'dark';
        /**
          * @default ''
         */
        "fullName": string;
        /**
          * @default 'cover'
         */
        "imageStyle": 'cover' | 'contain';
        /**
          * @default ''
         */
        "imageUrl": string;
        /**
          * @default ''
         */
        "jobTitle": string;
        /**
          * @default '1,1.5'
         */
        "ratio": '1,1' | '1,1.5' | '1,2';
        /**
          * @default false
         */
        "rounded": boolean;
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
        /**
          * @default 'left'
         */
        "textAlign": 'center' | 'left' | 'right';
        /**
          * @default 'black'
         */
        "textColour": brandColour;
        /**
          * @default ''
         */
        "url": string;
    }
    interface BiggiveBoxedContent {
        /**
          * Background colour
          * @default 'white'
         */
        "backgroundColour": string;
        /**
          * Horizontal padding
          * @default 3
         */
        "horizontalPadding": number;
        /**
          * Shadow
          * @default true
         */
        "shadow": boolean;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
        /**
          * Vertical padding
          * @default 3
         */
        "verticalPadding": number;
    }
    interface BiggiveBrandedImage {
        /**
          * Charity location
         */
        "charityLocation": string;
        /**
          * Charity name
         */
        "charityName": string;
        /**
          * Link to the charity's website
          * @deprecated We should stop passing this soon, and will link to charity URLs alongside socials.
         */
        "charityUrl": string;
        /**
          * Full URL of a image.
          * @default ''
         */
        "imageUrl": string;
        /**
          * Full URL of the logo.
          * @default ''
         */
        "logoUrl": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
    }
    interface BiggiveButton {
        /**
          * @default undefined
         */
        "buttonId": undefined | string;
        /**
          * Centered
          * @default false
         */
        "centered": boolean;
        /**
          * Colour Scheme
          * @default 'primary'
         */
        "colourScheme": brandColour;
        /**
          * For use only in philco site - the Big Give site does not use disabled buttons and does not have a design for such.
          * @default false
         */
        "disabled": boolean;
        /**
          * Display full width
          * @default false
         */
        "fullWidth": boolean;
        /**
          * Text
          * @default 'Click me'
         */
        "label": string;
        /**
          * New Tab
          * @default false
         */
        "openInNewTab": boolean;
        /**
          * Rounded corners
          * @default false
         */
        "rounded": boolean;
        /**
          * @default 'biggive'
         */
        "siteDesign": 'biggive' | 'philco';
        /**
          * Size
          * @default 'medium'
         */
        "size": string;
        /**
          * Space below component
          * @default 1
         */
        "spaceBelow": number;
        /**
          * URL
         */
        "url": string | undefined;
    }
    interface BiggiveCallToAction {
        /**
          * Default text colour
          * @default 'primary'
         */
        "defaultTextColour": string;
        /**
          * Main title
         */
        "mainTitle": string;
        /**
          * Main title colour
          * @default ''
         */
        "mainTitleColour": string;
        /**
          * Main title size
          * @default 2
         */
        "mainTitleSize": number;
        /**
          * Primary button Colour Scheme
          * @default 'primary'
         */
        "primaryButtonColourScheme": string;
        /**
          * Primary button Label
         */
        "primaryButtonLabel": string;
        /**
          * Primary button Url
         */
        "primaryButtonUrl": string;
        /**
          * Secondary button Colour Scheme
          * @default 'primary'
         */
        "secondaryButtonColourScheme": string;
        /**
          * Secondary button Label
         */
        "secondaryButtonLabel": string;
        /**
          * Secondary button Url
         */
        "secondaryButtonUrl": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Slug colour
          * @default ''
         */
        "slugColour": string;
        /**
          * Slug size
          * @default 4
         */
        "slugSize": number;
        /**
          * Space above component
          * @default 0
         */
        "spaceAbove": number;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
        /**
          * Subtitle
         */
        "subtitle": string;
        /**
          * Subtitle colour
          * @default ''
         */
        "subtitleColour": string;
        /**
          * Main title size
          * @default 4
         */
        "subtitleSize": number;
        /**
          * Teaser
         */
        "teaser": string;
        /**
          * Teaser colour
          * @default ''
         */
        "teaserColour": string;
    }
    interface BiggiveCampaignCard {
        /**
          * Full URL of a banner image.
         */
        "banner": string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle": string;
        /**
          * e.g. "Match Funded".
         */
        "campaignType": string;
        /**
          * To be used alongside isFutureCampaign = true or isPastCampaign = true. If either is true, we render out: 'Launches: ' + datetime or 'Closed: ' + datetime. Preferred format: DD/MM/YYYY, HH:MM DON-661.
         */
        "datetime": string;
        /**
          * Donate button colour scheme
          * @default 'primary'
         */
        "donateButtonColourScheme": string;
        /**
          * Donate button label
          * @default 'Donate now'
         */
        "donateButtonLabel": string;
        /**
          * Donate button url
         */
        "donateButtonUrl": string;
        /**
          * Boolean flag telling the component if the campaign is in the future (not open yet).
          * @default false
         */
        "isFutureCampaign": boolean;
        /**
          * Boolean flag telling the component if the campaign is in the future (not open yet).
          * @default false
         */
        "isPastCampaign": boolean;
        /**
          * Donate button colour scheme
          * @default 'clear-primary'
         */
        "moreInfoButtonColourScheme": string;
        /**
          * More information button label
          * @default 'Find out more'
         */
        "moreInfoButtonLabel": string;
        /**
          * More information button url
         */
        "moreInfoButtonUrl": string;
        /**
          * Display name of the charity or non-profit.
         */
        "organisationName": string;
        /**
          * Amount for the primary figure, formatted with currency symbol – null or omit to hide the figure & label.
         */
        "primaryFigureAmount": string | null;
        /**
          * Label for the primary figure – may be null or omitted for no label or if there's no figure.
         */
        "primaryFigureLabel": string | null;
        /**
          * Progress bar percentage – null or omit to hide the progress bar.
         */
        "progressBarCounter": number | null;
        /**
          * Amount for the secondary figure, formatted with currency symbol – null or omit to hide the figure & label.
         */
        "secondaryFigureAmount": string | null;
        /**
          * Label for the secondary figure – may be null or omitted for no label or if there's no figure.
         */
        "secondaryFigureLabel": string | null;
        /**
          * Space below component
          * @default 4
         */
        "spaceBelow": number;
    }
    interface BiggiveCampaignCardFilterGrid {
        /**
          * JSON array of beneficiary key/values, or takes a stringified equiavalent (for Storybook)
         */
        "beneficiaryOptions": string | Record<string, string> | string[];
        /**
          * Defines the text on the search button
          * @default 'Search'
         */
        "buttonText": string;
        /**
          * JSON array of category key/values, or takes a stringified equiavalent (for Storybook)
         */
        "categoryOptions": string | Record<string, string> | string[];
        /**
          * Intro
          * @default 'Find a charity or project'
         */
        "intro": string;
        /**
          * JSON array of location key/values, or takes a stringified equiavalent (for Storybook)
         */
        "locationOptions": string | Record<string, string> | string[];
        /**
          * Defines the text displayed as the placeholder in the input field before the user types anything
          * @default 'Search'
         */
        "placeholderText": string;
        /**
          * Optional search text prop. Useful for pre-populating the search field when the page is loaded with a search term already existing in the URL. This can happen when sharing links, or if a donor goes to a campaign page after searching, and then returns to the search results. In such a case, the search box text will clear, unless we use this prop to populate it on rendering. DON-652.
          * @default null
         */
        "searchText": string | null;
        /**
          * For injecting the chosen beneficiary to filter by, as per the comment above for `selectedSortByOption`.
          * @default null
         */
        "selectedFilterBeneficiary": string | null;
        /**
          * For injecting the chosen category to filter by, as per the comment above for `selectedSortByOption`.
          * @default null
         */
        "selectedFilterCategory": string | null;
        /**
          * For injecting the chosen location to filter by, as per the comment above for `selectedSortByOption`.
          * @default null
         */
        "selectedFilterLocation": string | null;
        /**
          * This helps us inject a pre-selected dropdown value from outside of this component. This is especially helpful for the Meta campaign and Explore pages, where searching by text wipes out previous sort options and re-uses Relevance, or where one of those two pages is loaded directly with URL parameters - in such a scenario the dropdown shows that it's pre-selected. DON-558.
         */
        "selectedSortByOption": sortOptionLabel;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
        /**
          * Typically on non-negligible scroll away from the search area.
         */
        "unfocusInputs": () => Promise<void>;
    }
    interface BiggiveCampaignHighlights {
        /**
          * Full URL of a banner image.
         */
        "banner": string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle": string;
        /**
          * Champion's name
         */
        "championName": string;
        /**
          * Link to all meta-campaigns funded by this champion. For example: /christmas-challenge-2022/the-reed-foundation-22 In other words, it follows the following format: '/' + campaign.parentRef + '/' + campaign.championRef
         */
        "championUrl": string;
        /**
          * Amount for the primary figure, formatted with currency symbol
         */
        "primaryFigureAmount": string;
        /**
          * Label for the primary figure
         */
        "primaryFigureLabel": string;
        /**
          * Primary stat icon
         */
        "primaryStatIcon": string;
        /**
          * Primary stat text
         */
        "primaryStatText": string;
        /**
          * Progress bar percentage
          * @default 100
         */
        "progressBarCounter": number;
        /**
          * Amount for the secondary figure, formatted with currency symbol
         */
        "secondaryFigureAmount": string;
        /**
          * Label for the secondary figure
         */
        "secondaryFigureLabel": string;
        /**
          * Secondary stat icon
         */
        "secondaryStatIcon": string;
        /**
          * Secondary stat text
         */
        "secondaryStatText": string;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
    }
    interface BiggiveContainerCard {
        /**
          * @default 'primary'
         */
        "backgroundColour": brandColour;
        /**
          * @default ''
         */
        "backgroundImageUrl": string;
        /**
          * @default 'white'
         */
        "cardColour": brandColour;
        /**
          * @default true
         */
        "clipBottomLeftCorner": boolean;
        /**
          * @default true
         */
        "clipTopRightCorner": boolean;
        /**
          * @default 3
         */
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
        /**
          * @default 'black'
         */
        "textColour": brandColour;
    }
    interface BiggiveCookieBanner {
        /**
          * If true the Preferences modal will be auto-opened - for use when the user has requested to edit their cookie preferences
          * @default false
         */
        "autoOpenPreferences": boolean;
        "blogUriPrefix": string;
        /**
          * This type is similar to CookiePreferences from donate-frontend/src/app/cookiePreference.service.ts but afaik there isn't a nice way to share a type.  When updating please also update the copy in the type of cookieBannerSavePreferencesSelected - using a named type there caused build problems.  When updating please also update the type of cookieBannerSavePreferencesSelected - I didn't find a way to avoid the duplication.
          * @default undefined
         */
        "previouslyAgreedCookiePreferences": | {
        analyticsAndTesting: boolean;
        thirdParty: boolean;
      }
    | undefined;
    }
    /**
     * Should be contained in a `<footer/>` or similar so that the page has appropriate
     * landmarks.
     */
    interface BiggiveFooter {
        "blogUrlPrefix": string | undefined;
        /**
          * URL prefixes vary by environment, and components library is not best placed to know what they are, so we take them as props
         */
        "donateUrlPrefix": string;
        "experienceUrlPrefix": string | undefined;
        /**
          * @default 5
         */
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default false
         */
        "smallCharityWeekEnabled": boolean;
        /**
          * Conditionally render footer menu: hard-coded (preset) when set to true, dynamic (slot-based) when set to false
          * @default false
         */
        "usePresetFooter": boolean;
    }
    interface BiggiveForm {
    }
    interface BiggiveFormFieldSelect {
        /**
          * Must match background of containing element, or unintended shape will appear.
         */
        "backgroundColour": 'white' | 'grey';
        /**
          * JSON array of label+value objects, or takes a stringified equiavalent (for Storybook)
         */
        "options": string | Array<{ label: string; value: string }>;
        /**
          * Placeholder. If there is no `prompt`, this should be a suitable ARIA label.
         */
        "placeholder": string | undefined;
        /**
          * Displayed as 'eyebrow' label over the top border of the box.
         */
        "prompt": string | null;
        /**
          * ID for the select element, used by a label. If not passed then a random id will be generated.
         */
        "selectElementId": string | undefined;
        /**
          * @default 'bordered'
         */
        "selectStyle": 'bordered' | 'underlined';
        "selectedLabel": string | null;
        /**
          * @default 'blue'
         */
        "selectedOptionColour": 'inherit' | 'blue';
        "selectedValue": string | null;
        "selectionChanged": (value: string) => void;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
    }
    interface BiggiveFormattedText {
        /**
          * Text colour. If undefined or blank colour will be inherited as normal from containing element.
         */
        "defaultTextColour": brandColour | undefined;
        /**
          * @default 100
         */
        "maxWidth": number;
        /**
          * @default 'biggive'
         */
        "siteDesign": 'biggive' | 'philco';
        /**
          * @default 0
         */
        "spaceBelow": number;
    }
    interface BiggiveGrid {
        /**
          * @default 3
         */
        "columnCount": number;
        /**
          * @default 0
         */
        "columnGap": spacingOption;
        /**
          * @default 4
         */
        "spaceBelow": number;
        /**
          * Deprecated - should use columGap Instead
          * @default false
         */
        "spaceBetween": boolean;
    }
    interface BiggiveHeading {
        /**
          * @default 'left'
         */
        "align": string;
        /**
          * @default 'primary'
         */
        "colour": brandColour;
        /**
          * @default 'h1'
         */
        "htmlElement": headingTag;
        /**
          * @default false
         */
        "icon": boolean;
        /**
          * @default 'primary'
         */
        "iconColour": brandColour;
        /**
          * @default 'biggive'
         */
        "siteDesign": 'biggive' | 'philco';
        /**
          * @default 1
         */
        "size": headingSize;
        /**
          * @default 2
         */
        "spaceAbove": spacingOption;
        /**
          * @default 4
         */
        "spaceBelow": spacingOption;
        /**
          * @default ''
         */
        "text": string;
    }
    /**
     * Heading banner component for use as a page header.
     * This component provides a banner with a background image, optional logo, and text content.
     * It supports different heights and customizable colors.
     */
    interface BiggiveHeadingBanner {
        /**
          * Background color for the banner
         */
        "backgroundColour": string;
        /**
          * Focal point for the image positioning x and y values are percentages (0-100)
         */
        "focalPoint": string | { x: number; y: number };
        /**
          * Height variant of the banner 'tall' for full height, 'short' for reduced height
          * @default 'tall'
         */
        "height": 'short' | 'tall';
        /**
          * Optional logo object with URL and alt text
         */
        "logo"?: { url: string; alt?: string } | string;
        /**
          * URL for the main banner image
         */
        "mainImageUrl": string;
        /**
          * Main title text for the banner
         */
        "mainTitle": string;
        /**
          * Optional slightly smaller text to appear above the main title
          * @default ''
         */
        "slug"?: string;
        /**
          * Optional teaser text that appears below the main title
         */
        "teaser": string;
        /**
          * Background color for the text content area
         */
        "textBackgroundColour": string;
        /**
          * Text color for all text content
         */
        "textColour": string;
    }
    interface BiggiveHeroImage {
        /**
          * Button Colour Scheme
          * @default 'primary'
         */
        "buttonColourScheme": brandColour;
        /**
          * Button Label
         */
        "buttonLabel": string;
        /**
          * Button Url
         */
        "buttonUrl": string;
        /**
          * Colour Scheme
          * @default 'primary'
         */
        "colourScheme": brandColour;
        /**
          * Full URL of a logo image.
          * @default ''
         */
        "logo": string;
        /**
          * Logo alt text
          * @default ''
         */
        "logoAltText": string;
        /**
          * Logo container height selection. Numbers are not measurements.
          * @default 3
         */
        "logoHeight": 1|2|3|4|5|6|7|8|9|10;
        /**
          * Full URL of a main hero image.
          * @default null
         */
        "mainImage": string|null;
        /**
          * Horizontal alignment of image
          * @default 'center'
         */
        "mainImageAlignHorizontal": string;
        /**
          * Vertical alignment of image
          * @default 'center'
         */
        "mainImageAlignVertical": string;
        /**
          * Determines whether the main image is clipped to a triangle shape (default) or used as a background for the entire component. Clipping can leave a lot of blank space.
          * @default 'triangle'
         */
        "mainImageShape": 'triangle'|'rectangle';
        /**
          * Hero image title, typically the page.
         */
        "mainTitle": string;
        /**
          * Main title colour
         */
        "mainTitleColour"?: brandColour;
        /**
          * Header slug
         */
        "slug": string;
        /**
          * Header slug colour
         */
        "slugColour": brandColour;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": spacingOption;
        /**
          * Introductory teaser text
         */
        "teaser": string|undefined;
        /**
          * Teaser colour
         */
        "teaserColour"?: brandColour;
    }
    interface BiggiveIconButton {
        /**
          * @default false
         */
        "arrow": boolean;
        /**
          * @default 'black'
         */
        "arrowColour": brandColour;
        /**
          * @default 'white'
         */
        "backgroundColour": brandColour;
        /**
          * @default 0
         */
        "backgroundPadding": spacingOption;
        /**
          * @default undefined
         */
        "buttonId": undefined | string;
        /**
          * @default false
         */
        "centered": boolean;
        /**
          * @default false
         */
        "circle": boolean;
        "icon": string;
        /**
          * @default false
         */
        "openInNewTab": boolean;
        /**
          * @default false
         */
        "rounded": boolean;
        /**
          * @default false
         */
        "shadow": boolean;
        /**
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
        /**
          * @default 1
         */
        "spaceBelow": spacingOption;
        "text": string;
        /**
          * @default 'black'
         */
        "textColour": brandColour;
        "url": string;
    }
    interface BiggiveImage {
        /**
          * Image width
          * @default 0
         */
        "height": number;
        /**
          * Image alt text tag.
          * @default ''
         */
        "imageAltText": string;
        /**
          * Full URL of a image.
          * @default ''
         */
        "imageUrl": string;
        /**
          * Size unit
          * @default 'px'
         */
        "sizeUnit": string;
        /**
          * Space above component
          * @default 0
         */
        "spaceAbove": number;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
        /**
          * Image width
          * @default 0
         */
        "width": number;
    }
    interface BiggiveImageButton {
        /**
          * @default false
         */
        "arrow": boolean;
        /**
          * @default 'black'
         */
        "arrowColour": brandColour;
        /**
          * @default 'white'
         */
        "backgroundColour": brandColour;
        /**
          * @default 0
         */
        "backgroundPadding": spacingOption;
        /**
          * @default undefined
         */
        "buttonId": undefined | string;
        /**
          * @default false
         */
        "centered": boolean;
        /**
          * @default false
         */
        "circle": boolean;
        /**
          * @default 'cover'
         */
        "imageStyle": string;
        "imageUrl": string;
        /**
          * @default false
         */
        "openInNewTab": boolean;
        /**
          * @default false
         */
        "rounded": boolean;
        /**
          * @default false
         */
        "shadow": boolean;
        /**
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
        /**
          * @default 1
         */
        "spaceBelow": spacingOption;
        "text": string;
        /**
          * @default 'black'
         */
        "textColour": brandColour;
        "url": string;
    }
    interface BiggiveImageCard {
        /**
          * @default false
         */
        "addAnimation": boolean;
        /**
          * @default 'primary'
         */
        "backgroundColour": brandColour;
        /**
          * @default 'center'
         */
        "buttonAlign": string;
        /**
          * @default 'clear-primary'
         */
        "buttonColourScheme": string;
        "buttonLabel": string;
        /**
          * @default 'standard'
         */
        "buttonStyle": string;
        "buttonUrl": string;
        /**
          * @default true
         */
        "clipBottomLeftCorner": boolean;
        /**
          * @default true
         */
        "clipTopRightCorner": boolean;
        "mainImageAltText": string;
        "mainImageUrl": string;
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
        "teaser": string;
        /**
          * @default 'black'
         */
        "teaserColour": brandColour;
        /**
          * @default 'center'
         */
        "textAlign": 'left' | 'center' | 'right';
    }
    interface BiggiveImageFeature {
        /**
          * Button Colour Scheme
          * @default 'primary'
         */
        "buttonColourScheme": string;
        /**
          * Button Label
         */
        "buttonLabel": string;
        /**
          * Button Url
         */
        "buttonUrl": string;
        /**
          * Default text colour
          * @default 'primary'
         */
        "defaultTextColour": string;
        /**
          * Image alt text tag.
          * @default ''
         */
        "imageAltText": string;
        /**
          * Full URL of a image.
          * @default ''
         */
        "imageUrl": string;
        /**
          * Video title
         */
        "mainTitle": string;
        /**
          * Slug colour
          * @default ''
         */
        "mainTitleColour": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Slug colour
          * @default ''
         */
        "slugColour": string;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
        /**
          * Introductory teaser text
         */
        "teaser": string;
        /**
          * Teaser colour
          * @default ''
         */
        "teaserColour": string;
    }
    interface BiggiveMainMenu {
        /**
          * @default 'https://biggive.org'
         */
        "blogUrlPrefix": string;
        "closeMobileMenuFromOutside": () => Promise<void>;
        /**
          * @default 'https://donate.biggive.org'
         */
        "donateUrlPrefix": string;
        /**
          * @default 'https://community.biggive.org'
         */
        "experienceUrlPrefix": string;
        /**
          * Whether the current user is logged in (i.e. is assumed to have a valid JWT). They get links to some extra content if they are.
          * @default false
         */
        "isLoggedIn": boolean;
        /**
          * @default false
         */
        "smallCharityWeekEnabled": boolean;
        /**
          * We don't want to make the ?noredirect version proliferate too much so err on not including this. We also don't really want every single page to have to get highlight cards to set this property. So for now, typically only meta-campaign bothers to get the correct value to set this true if appropriate. That's the page which is the destination of the redirect so is arguably the only place where it's essential that the menu lets you go to the 'normal' home page.
          * @default false
         */
        "someCampaignHasHomePageRedirect": boolean;
    }
    interface BiggiveMiscIcon {
        /**
          * Background colour
          * @default 'primary'
         */
        "backgroundColour": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Background colour
          * @default 'white'
         */
        "iconColour": string;
        /**
          * Url
         */
        "url": string;
    }
    interface BiggiveNavGroup {
        /**
          * Inline
          * @default true
         */
        "inline": boolean;
    }
    interface BiggiveNavItem {
        /**
          * URL
         */
        "iconColour": string;
        /**
          * Label
         */
        "label": string;
        /**
          * URL
         */
        "url": string;
    }
    interface BiggivePageColumn {
    }
    interface BiggivePageColumns {
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
    }
    interface BiggivePageSection {
        /**
          * Colour scheme
         */
        "colourScheme": string;
        /**
          * Width
          * @default 100
         */
        "maxWidth": number;
        /**
          * Bleeds the primary brand colour to the left and right edge of the viewport, even if used within a containing block element.
          * @default false
         */
        "primaryFullBleed": boolean;
        /**
          * Section style bottom
          * @default 'straight'
         */
        "sectionStyleBottom": sectionStyle;
        /**
          * Section style top
          * @default 'straight'
         */
        "sectionStyleTop": sectionStyle;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
    }
    interface BiggivePopup {
        "closeFromOutside": () => Promise<void>;
        /**
          * Function to execute when the modal is closed, whether by the user or programmatically.
          * @default () => {}
         */
        "modalClosedCallback": () => void;
        "openFromOutside": () => Promise<void>;
    }
    interface BiggiveProgressBar {
        /**
          * Colour Scheme
          * @default 'primary'
         */
        "colourScheme": string;
        /**
          * Percentage to show + use for CSS width; round before input if desired
          * @default 100
         */
        "counter"?: number | null;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
    }
    interface BiggiveQuote {
        /**
          * @default ''
         */
        "attribution": string;
        /**
          * @default 'black'
         */
        "defaultTextColour": brandColour;
        /**
          * @default ''
         */
        "quote": string;
        /**
          * @default 'primary'
         */
        "quoteIconColour": brandColour;
        /**
          * @default 'biggive'
         */
        "siteDesign": 'biggive' | 'philco';
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
    }
    interface BiggiveSheet {
        /**
          * @default 'primary'
         */
        "backgroundColour": brandColour;
        /**
          * A string ID (no spaces) unique within the page context, used to trigger the opening of the sheet from an anchor hash.
          * @default ''
         */
        "sheetId": string;
        /**
          * @default 'white'
         */
        "textColour": brandColour;
    }
    /**
     * Used to indicate and link to a charity's social page, or their own web site.
     */
    interface BiggiveSocialIcon {
        /**
          * Background colour
          * @default 'primary'
         */
        "backgroundColour": string;
        /**
          * Icon colour
          * @default 'white'
         */
        "iconColour": string;
        /**
          * Used within accessible labels for links. Typically a charity name or "Big Give". Can also be "Share".
          * @default 'Big Give'
         */
        "labelPrefix": string;
        /**
          * Service name
         */
        "service": 'Facebook' | 'Instagram' | 'LinkedIn' | 'Twitter' | 'Web' | 'Whatsapp' | 'YouTube';
        /**
          * Url
          * @default '#'
         */
        "url": string;
        /**
          * Used in the social icons in the biggive-footer, which are more spaced out than others across the site. COM-43.
          * @default false
         */
        "wide": boolean;
    }
    interface BiggiveTab {
        /**
          * @default ''
         */
        "tabTitle": string;
    }
    interface BiggiveTabbedContent {
        /**
          * @default 'white'
         */
        "buttonBackgroundColour": brandColour;
        /**
          * @default 'primary'
         */
        "buttonIconColour": brandColour;
        /**
          * @default 'grey-medium'
         */
        "navigationHighlightColour": brandColour;
        /**
          * @default 'primary'
         */
        "selectedNavigationHighlightColour": brandColour;
        /**
          * @default 'primary'
         */
        "selectedTextColour": brandColour;
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
        /**
          * @default 'black'
         */
        "textColour": brandColour;
    }
    interface BiggiveTable {
        /**
          * @default 'grey-light'
         */
        "bodyBackgroundColour": brandColour;
        /**
          * @default 'black'
         */
        "bodyTextColour": brandColour;
        /**
          * @default 'white'
         */
        "headerBackgroundColour": brandColour;
        /**
          * @default 'primary'
         */
        "headerTextColour": brandColour;
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
    }
    /**
     * Initially developed for use within the new donate stepper design. Currently has a hard-coded background
     * of $colour-grey-background, intened to appear transparent when used on a page with a matching background.
     * Please ensure input is styled as width: 100%.
     * Requires slots `label` and `input`.
     */
    interface BiggiveTextInput {
        /**
          * ISO-4217 currency code if input is for a money value
         */
        "currency": 'GBP' | 'USD' | undefined;
        /**
          * @default 'bordered'
         */
        "selectStyle": 'bordered' | 'underlined';
        /**
          * @default 'biggive'
         */
        "siteDesign": 'biggive' | 'philco';
        /**
          * @default 0
         */
        "spaceBelow": number;
    }
    interface BiggiveTimeline {
        /**
          * @default 'white'
         */
        "buttonBackgroundColour": brandColour;
        /**
          * @default 'primary'
         */
        "buttonIconColour": brandColour;
        /**
          * @default 'white'
         */
        "entryBackgroundColour": brandColour;
        /**
          * @default 'black'
         */
        "entryDateColour": brandColour;
        /**
          * @default 'secondary'
         */
        "entryHighlightColour": brandColour;
        /**
          * @default 'black'
         */
        "entryTextColour": brandColour;
        /**
          * @default 'primary'
         */
        "entryTitleColour": brandColour;
        /**
          * @default 'grey-medium'
         */
        "navigationHighlightColour": brandColour;
        /**
          * @default 'primary'
         */
        "selectedNavigationHighlightColour": brandColour;
        /**
          * @default 'primary'
         */
        "selectedTextColour": brandColour;
        /**
          * @default 0
         */
        "spaceBelow": spacingOption;
        /**
          * @default 'black'
         */
        "textColour": brandColour;
    }
    interface BiggiveTimelineEntry {
        /**
          * Should be in the format 'YYYY-mm-dd', for example '2023-01-01'
         */
        "date": string;
        "heading": string;
    }
    interface BiggiveTotalizer {
        /**
          * Primary message
         */
        "mainMessage": string;
        /**
          * Primary banner colour
          * @default 'primary'
         */
        "primaryColour": string;
        /**
          * Primary text colour
          * @default 'white'
         */
        "primaryTextColour": string;
        /**
          * Secondary banner colour
          * @default 'secondary'
         */
        "secondaryColour": string;
        /**
          * Secondary text colour
          * @default 'black'
         */
        "secondaryTextColour": string;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
    }
    interface BiggiveTotalizerTickerItem {
        /**
          * Figure
         */
        "figure": string;
        /**
          * Figure
         */
        "label": string;
    }
    interface BiggiveVideo {
        /**
          * Space above component
          * @default 0
         */
        "spaceAbove": number;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
        /**
          * Full URL of a video.
          * @default ''
         */
        "videoUrl": string;
    }
    interface BiggiveVideoFeature {
        /**
          * Button Colour Scheme
          * @default 'primary'
         */
        "buttonColourScheme": string;
        /**
          * Button Label
         */
        "buttonLabel": string;
        /**
          * Button Url
         */
        "buttonUrl": string;
        /**
          * Default text colour
          * @default 'primary'
         */
        "defaultTextColour": string;
        /**
          * Video title
         */
        "mainTitle": string;
        /**
          * Slug colour
          * @default ''
         */
        "mainTitleColour": string;
        /**
          * Slug
         */
        "slug": string;
        /**
          * Slug colour
          * @default ''
         */
        "slugColour": string;
        /**
          * Space above component
          * @default 0
         */
        "spaceAbove": number;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow": number;
        /**
          * Introductory teaser text
         */
        "teaser": string;
        /**
          * Teaser colour
          * @default ''
         */
        "teaserColour": string;
        /**
          * Full URL of a video.
          * @default ''
         */
        "videoUrl": string;
    }
    /**
     * Should be contained in a `<footer/>` or similar so that the page has appropriate
     * landmarks.
     */
    interface PhilcoFooter {
        /**
          * @default 5
         */
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default 'https://philco.org.uk/'
         */
        "philcoUrlPrefix": string;
    }
    interface PhilcoMainMenu {
        "closeMobileMenuFromOutside": () => Promise<void>;
        "philcoUrlPrefix": string;
    }
}
export interface BiggiveButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveButtonElement;
}
export interface BiggiveCampaignCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveCampaignCardElement;
}
export interface BiggiveCampaignCardFilterGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveCampaignCardFilterGridElement;
}
export interface BiggiveCookieBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveCookieBannerElement;
}
export interface BiggiveIconButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveIconButtonElement;
}
export interface BiggiveImageButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveImageButtonElement;
}
export interface BiggiveMainMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBiggiveMainMenuElement;
}
export interface PhilcoMainMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPhilcoMainMenuElement;
}
declare global {
    interface HTMLBiggiveAccordionElement extends Components.BiggiveAccordion, HTMLStencilElement {
    }
    var HTMLBiggiveAccordionElement: {
        prototype: HTMLBiggiveAccordionElement;
        new (): HTMLBiggiveAccordionElement;
    };
    interface HTMLBiggiveAccordionEntryElement extends Components.BiggiveAccordionEntry, HTMLStencilElement {
    }
    var HTMLBiggiveAccordionEntryElement: {
        prototype: HTMLBiggiveAccordionEntryElement;
        new (): HTMLBiggiveAccordionEntryElement;
    };
    interface HTMLBiggiveArticleCardElement extends Components.BiggiveArticleCard, HTMLStencilElement {
    }
    var HTMLBiggiveArticleCardElement: {
        prototype: HTMLBiggiveArticleCardElement;
        new (): HTMLBiggiveArticleCardElement;
    };
    interface HTMLBiggiveBackToTopElement extends Components.BiggiveBackToTop, HTMLStencilElement {
    }
    var HTMLBiggiveBackToTopElement: {
        prototype: HTMLBiggiveBackToTopElement;
        new (): HTMLBiggiveBackToTopElement;
    };
    interface HTMLBiggiveBasicCardElement extends Components.BiggiveBasicCard, HTMLStencilElement {
    }
    var HTMLBiggiveBasicCardElement: {
        prototype: HTMLBiggiveBasicCardElement;
        new (): HTMLBiggiveBasicCardElement;
    };
    interface HTMLBiggiveBiographyCardElement extends Components.BiggiveBiographyCard, HTMLStencilElement {
    }
    var HTMLBiggiveBiographyCardElement: {
        prototype: HTMLBiggiveBiographyCardElement;
        new (): HTMLBiggiveBiographyCardElement;
    };
    interface HTMLBiggiveBoxedContentElement extends Components.BiggiveBoxedContent, HTMLStencilElement {
    }
    var HTMLBiggiveBoxedContentElement: {
        prototype: HTMLBiggiveBoxedContentElement;
        new (): HTMLBiggiveBoxedContentElement;
    };
    interface HTMLBiggiveBrandedImageElement extends Components.BiggiveBrandedImage, HTMLStencilElement {
    }
    var HTMLBiggiveBrandedImageElement: {
        prototype: HTMLBiggiveBrandedImageElement;
        new (): HTMLBiggiveBrandedImageElement;
    };
    interface HTMLBiggiveButtonElementEventMap {
        "doButtonClick": { event: object; url: string };
    }
    interface HTMLBiggiveButtonElement extends Components.BiggiveButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBiggiveButtonElementEventMap>(type: K, listener: (this: HTMLBiggiveButtonElement, ev: BiggiveButtonCustomEvent<HTMLBiggiveButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBiggiveButtonElementEventMap>(type: K, listener: (this: HTMLBiggiveButtonElement, ev: BiggiveButtonCustomEvent<HTMLBiggiveButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBiggiveButtonElement: {
        prototype: HTMLBiggiveButtonElement;
        new (): HTMLBiggiveButtonElement;
    };
    interface HTMLBiggiveCallToActionElement extends Components.BiggiveCallToAction, HTMLStencilElement {
    }
    var HTMLBiggiveCallToActionElement: {
        prototype: HTMLBiggiveCallToActionElement;
        new (): HTMLBiggiveCallToActionElement;
    };
    interface HTMLBiggiveCampaignCardElementEventMap {
        "doCardGeneralClick": { event: object; url: string };
    }
    interface HTMLBiggiveCampaignCardElement extends Components.BiggiveCampaignCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBiggiveCampaignCardElementEventMap>(type: K, listener: (this: HTMLBiggiveCampaignCardElement, ev: BiggiveCampaignCardCustomEvent<HTMLBiggiveCampaignCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBiggiveCampaignCardElementEventMap>(type: K, listener: (this: HTMLBiggiveCampaignCardElement, ev: BiggiveCampaignCardCustomEvent<HTMLBiggiveCampaignCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBiggiveCampaignCardElement: {
        prototype: HTMLBiggiveCampaignCardElement;
        new (): HTMLBiggiveCampaignCardElement;
    };
    interface HTMLBiggiveCampaignCardFilterGridElementEventMap {
        "doSearchAndFilterUpdate": {
    searchText: string | null;
    sortBy: string | null;
    filterCategory: string | null;
    filterBeneficiary: string | null;
    filterLocation: string | null;
  };
    }
    interface HTMLBiggiveCampaignCardFilterGridElement extends Components.BiggiveCampaignCardFilterGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBiggiveCampaignCardFilterGridElementEventMap>(type: K, listener: (this: HTMLBiggiveCampaignCardFilterGridElement, ev: BiggiveCampaignCardFilterGridCustomEvent<HTMLBiggiveCampaignCardFilterGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBiggiveCampaignCardFilterGridElementEventMap>(type: K, listener: (this: HTMLBiggiveCampaignCardFilterGridElement, ev: BiggiveCampaignCardFilterGridCustomEvent<HTMLBiggiveCampaignCardFilterGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBiggiveCampaignCardFilterGridElement: {
        prototype: HTMLBiggiveCampaignCardFilterGridElement;
        new (): HTMLBiggiveCampaignCardFilterGridElement;
    };
    interface HTMLBiggiveCampaignHighlightsElement extends Components.BiggiveCampaignHighlights, HTMLStencilElement {
    }
    var HTMLBiggiveCampaignHighlightsElement: {
        prototype: HTMLBiggiveCampaignHighlightsElement;
        new (): HTMLBiggiveCampaignHighlightsElement;
    };
    interface HTMLBiggiveContainerCardElement extends Components.BiggiveContainerCard, HTMLStencilElement {
    }
    var HTMLBiggiveContainerCardElement: {
        prototype: HTMLBiggiveContainerCardElement;
        new (): HTMLBiggiveContainerCardElement;
    };
    interface HTMLBiggiveCookieBannerElementEventMap {
        "preferenceModalClosed": void;
        "cookieBannerAcceptAllSelected": void;
        "cookieBannerSavePreferencesSelected": {
    analyticsAndTesting: boolean;
    thirdParty: boolean;
  };
    }
    interface HTMLBiggiveCookieBannerElement extends Components.BiggiveCookieBanner, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBiggiveCookieBannerElementEventMap>(type: K, listener: (this: HTMLBiggiveCookieBannerElement, ev: BiggiveCookieBannerCustomEvent<HTMLBiggiveCookieBannerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBiggiveCookieBannerElementEventMap>(type: K, listener: (this: HTMLBiggiveCookieBannerElement, ev: BiggiveCookieBannerCustomEvent<HTMLBiggiveCookieBannerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBiggiveCookieBannerElement: {
        prototype: HTMLBiggiveCookieBannerElement;
        new (): HTMLBiggiveCookieBannerElement;
    };
    /**
     * Should be contained in a `<footer/>` or similar so that the page has appropriate
     * landmarks.
     */
    interface HTMLBiggiveFooterElement extends Components.BiggiveFooter, HTMLStencilElement {
    }
    var HTMLBiggiveFooterElement: {
        prototype: HTMLBiggiveFooterElement;
        new (): HTMLBiggiveFooterElement;
    };
    interface HTMLBiggiveFormElement extends Components.BiggiveForm, HTMLStencilElement {
    }
    var HTMLBiggiveFormElement: {
        prototype: HTMLBiggiveFormElement;
        new (): HTMLBiggiveFormElement;
    };
    interface HTMLBiggiveFormFieldSelectElement extends Components.BiggiveFormFieldSelect, HTMLStencilElement {
    }
    var HTMLBiggiveFormFieldSelectElement: {
        prototype: HTMLBiggiveFormFieldSelectElement;
        new (): HTMLBiggiveFormFieldSelectElement;
    };
    interface HTMLBiggiveFormattedTextElement extends Components.BiggiveFormattedText, HTMLStencilElement {
    }
    var HTMLBiggiveFormattedTextElement: {
        prototype: HTMLBiggiveFormattedTextElement;
        new (): HTMLBiggiveFormattedTextElement;
    };
    interface HTMLBiggiveGridElement extends Components.BiggiveGrid, HTMLStencilElement {
    }
    var HTMLBiggiveGridElement: {
        prototype: HTMLBiggiveGridElement;
        new (): HTMLBiggiveGridElement;
    };
    interface HTMLBiggiveHeadingElement extends Components.BiggiveHeading, HTMLStencilElement {
    }
    var HTMLBiggiveHeadingElement: {
        prototype: HTMLBiggiveHeadingElement;
        new (): HTMLBiggiveHeadingElement;
    };
    /**
     * Heading banner component for use as a page header.
     * This component provides a banner with a background image, optional logo, and text content.
     * It supports different heights and customizable colors.
     */
    interface HTMLBiggiveHeadingBannerElement extends Components.BiggiveHeadingBanner, HTMLStencilElement {
    }
    var HTMLBiggiveHeadingBannerElement: {
        prototype: HTMLBiggiveHeadingBannerElement;
        new (): HTMLBiggiveHeadingBannerElement;
    };
    interface HTMLBiggiveHeroImageElement extends Components.BiggiveHeroImage, HTMLStencilElement {
    }
    var HTMLBiggiveHeroImageElement: {
        prototype: HTMLBiggiveHeroImageElement;
        new (): HTMLBiggiveHeroImageElement;
    };
    interface HTMLBiggiveIconButtonElementEventMap {
        "doButtonClick": { event: object; url: string };
    }
    interface HTMLBiggiveIconButtonElement extends Components.BiggiveIconButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBiggiveIconButtonElementEventMap>(type: K, listener: (this: HTMLBiggiveIconButtonElement, ev: BiggiveIconButtonCustomEvent<HTMLBiggiveIconButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBiggiveIconButtonElementEventMap>(type: K, listener: (this: HTMLBiggiveIconButtonElement, ev: BiggiveIconButtonCustomEvent<HTMLBiggiveIconButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBiggiveIconButtonElement: {
        prototype: HTMLBiggiveIconButtonElement;
        new (): HTMLBiggiveIconButtonElement;
    };
    interface HTMLBiggiveImageElement extends Components.BiggiveImage, HTMLStencilElement {
    }
    var HTMLBiggiveImageElement: {
        prototype: HTMLBiggiveImageElement;
        new (): HTMLBiggiveImageElement;
    };
    interface HTMLBiggiveImageButtonElementEventMap {
        "doButtonClick": { event: object; url: string };
    }
    interface HTMLBiggiveImageButtonElement extends Components.BiggiveImageButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBiggiveImageButtonElementEventMap>(type: K, listener: (this: HTMLBiggiveImageButtonElement, ev: BiggiveImageButtonCustomEvent<HTMLBiggiveImageButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBiggiveImageButtonElementEventMap>(type: K, listener: (this: HTMLBiggiveImageButtonElement, ev: BiggiveImageButtonCustomEvent<HTMLBiggiveImageButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBiggiveImageButtonElement: {
        prototype: HTMLBiggiveImageButtonElement;
        new (): HTMLBiggiveImageButtonElement;
    };
    interface HTMLBiggiveImageCardElement extends Components.BiggiveImageCard, HTMLStencilElement {
    }
    var HTMLBiggiveImageCardElement: {
        prototype: HTMLBiggiveImageCardElement;
        new (): HTMLBiggiveImageCardElement;
    };
    interface HTMLBiggiveImageFeatureElement extends Components.BiggiveImageFeature, HTMLStencilElement {
    }
    var HTMLBiggiveImageFeatureElement: {
        prototype: HTMLBiggiveImageFeatureElement;
        new (): HTMLBiggiveImageFeatureElement;
    };
    interface HTMLBiggiveMainMenuElementEventMap {
        "logoutClicked": void;
    }
    interface HTMLBiggiveMainMenuElement extends Components.BiggiveMainMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLBiggiveMainMenuElementEventMap>(type: K, listener: (this: HTMLBiggiveMainMenuElement, ev: BiggiveMainMenuCustomEvent<HTMLBiggiveMainMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLBiggiveMainMenuElementEventMap>(type: K, listener: (this: HTMLBiggiveMainMenuElement, ev: BiggiveMainMenuCustomEvent<HTMLBiggiveMainMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLBiggiveMainMenuElement: {
        prototype: HTMLBiggiveMainMenuElement;
        new (): HTMLBiggiveMainMenuElement;
    };
    interface HTMLBiggiveMiscIconElement extends Components.BiggiveMiscIcon, HTMLStencilElement {
    }
    var HTMLBiggiveMiscIconElement: {
        prototype: HTMLBiggiveMiscIconElement;
        new (): HTMLBiggiveMiscIconElement;
    };
    interface HTMLBiggiveNavGroupElement extends Components.BiggiveNavGroup, HTMLStencilElement {
    }
    var HTMLBiggiveNavGroupElement: {
        prototype: HTMLBiggiveNavGroupElement;
        new (): HTMLBiggiveNavGroupElement;
    };
    interface HTMLBiggiveNavItemElement extends Components.BiggiveNavItem, HTMLStencilElement {
    }
    var HTMLBiggiveNavItemElement: {
        prototype: HTMLBiggiveNavItemElement;
        new (): HTMLBiggiveNavItemElement;
    };
    interface HTMLBiggivePageColumnElement extends Components.BiggivePageColumn, HTMLStencilElement {
    }
    var HTMLBiggivePageColumnElement: {
        prototype: HTMLBiggivePageColumnElement;
        new (): HTMLBiggivePageColumnElement;
    };
    interface HTMLBiggivePageColumnsElement extends Components.BiggivePageColumns, HTMLStencilElement {
    }
    var HTMLBiggivePageColumnsElement: {
        prototype: HTMLBiggivePageColumnsElement;
        new (): HTMLBiggivePageColumnsElement;
    };
    interface HTMLBiggivePageSectionElement extends Components.BiggivePageSection, HTMLStencilElement {
    }
    var HTMLBiggivePageSectionElement: {
        prototype: HTMLBiggivePageSectionElement;
        new (): HTMLBiggivePageSectionElement;
    };
    interface HTMLBiggivePopupElement extends Components.BiggivePopup, HTMLStencilElement {
    }
    var HTMLBiggivePopupElement: {
        prototype: HTMLBiggivePopupElement;
        new (): HTMLBiggivePopupElement;
    };
    interface HTMLBiggiveProgressBarElement extends Components.BiggiveProgressBar, HTMLStencilElement {
    }
    var HTMLBiggiveProgressBarElement: {
        prototype: HTMLBiggiveProgressBarElement;
        new (): HTMLBiggiveProgressBarElement;
    };
    interface HTMLBiggiveQuoteElement extends Components.BiggiveQuote, HTMLStencilElement {
    }
    var HTMLBiggiveQuoteElement: {
        prototype: HTMLBiggiveQuoteElement;
        new (): HTMLBiggiveQuoteElement;
    };
    interface HTMLBiggiveSheetElement extends Components.BiggiveSheet, HTMLStencilElement {
    }
    var HTMLBiggiveSheetElement: {
        prototype: HTMLBiggiveSheetElement;
        new (): HTMLBiggiveSheetElement;
    };
    /**
     * Used to indicate and link to a charity's social page, or their own web site.
     */
    interface HTMLBiggiveSocialIconElement extends Components.BiggiveSocialIcon, HTMLStencilElement {
    }
    var HTMLBiggiveSocialIconElement: {
        prototype: HTMLBiggiveSocialIconElement;
        new (): HTMLBiggiveSocialIconElement;
    };
    interface HTMLBiggiveTabElement extends Components.BiggiveTab, HTMLStencilElement {
    }
    var HTMLBiggiveTabElement: {
        prototype: HTMLBiggiveTabElement;
        new (): HTMLBiggiveTabElement;
    };
    interface HTMLBiggiveTabbedContentElement extends Components.BiggiveTabbedContent, HTMLStencilElement {
    }
    var HTMLBiggiveTabbedContentElement: {
        prototype: HTMLBiggiveTabbedContentElement;
        new (): HTMLBiggiveTabbedContentElement;
    };
    interface HTMLBiggiveTableElement extends Components.BiggiveTable, HTMLStencilElement {
    }
    var HTMLBiggiveTableElement: {
        prototype: HTMLBiggiveTableElement;
        new (): HTMLBiggiveTableElement;
    };
    /**
     * Initially developed for use within the new donate stepper design. Currently has a hard-coded background
     * of $colour-grey-background, intened to appear transparent when used on a page with a matching background.
     * Please ensure input is styled as width: 100%.
     * Requires slots `label` and `input`.
     */
    interface HTMLBiggiveTextInputElement extends Components.BiggiveTextInput, HTMLStencilElement {
    }
    var HTMLBiggiveTextInputElement: {
        prototype: HTMLBiggiveTextInputElement;
        new (): HTMLBiggiveTextInputElement;
    };
    interface HTMLBiggiveTimelineElement extends Components.BiggiveTimeline, HTMLStencilElement {
    }
    var HTMLBiggiveTimelineElement: {
        prototype: HTMLBiggiveTimelineElement;
        new (): HTMLBiggiveTimelineElement;
    };
    interface HTMLBiggiveTimelineEntryElement extends Components.BiggiveTimelineEntry, HTMLStencilElement {
    }
    var HTMLBiggiveTimelineEntryElement: {
        prototype: HTMLBiggiveTimelineEntryElement;
        new (): HTMLBiggiveTimelineEntryElement;
    };
    interface HTMLBiggiveTotalizerElement extends Components.BiggiveTotalizer, HTMLStencilElement {
    }
    var HTMLBiggiveTotalizerElement: {
        prototype: HTMLBiggiveTotalizerElement;
        new (): HTMLBiggiveTotalizerElement;
    };
    interface HTMLBiggiveTotalizerTickerItemElement extends Components.BiggiveTotalizerTickerItem, HTMLStencilElement {
    }
    var HTMLBiggiveTotalizerTickerItemElement: {
        prototype: HTMLBiggiveTotalizerTickerItemElement;
        new (): HTMLBiggiveTotalizerTickerItemElement;
    };
    interface HTMLBiggiveVideoElement extends Components.BiggiveVideo, HTMLStencilElement {
    }
    var HTMLBiggiveVideoElement: {
        prototype: HTMLBiggiveVideoElement;
        new (): HTMLBiggiveVideoElement;
    };
    interface HTMLBiggiveVideoFeatureElement extends Components.BiggiveVideoFeature, HTMLStencilElement {
    }
    var HTMLBiggiveVideoFeatureElement: {
        prototype: HTMLBiggiveVideoFeatureElement;
        new (): HTMLBiggiveVideoFeatureElement;
    };
    /**
     * Should be contained in a `<footer/>` or similar so that the page has appropriate
     * landmarks.
     */
    interface HTMLPhilcoFooterElement extends Components.PhilcoFooter, HTMLStencilElement {
    }
    var HTMLPhilcoFooterElement: {
        prototype: HTMLPhilcoFooterElement;
        new (): HTMLPhilcoFooterElement;
    };
    interface HTMLPhilcoMainMenuElementEventMap {
        "logoutClicked": void;
    }
    interface HTMLPhilcoMainMenuElement extends Components.PhilcoMainMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPhilcoMainMenuElementEventMap>(type: K, listener: (this: HTMLPhilcoMainMenuElement, ev: PhilcoMainMenuCustomEvent<HTMLPhilcoMainMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPhilcoMainMenuElementEventMap>(type: K, listener: (this: HTMLPhilcoMainMenuElement, ev: PhilcoMainMenuCustomEvent<HTMLPhilcoMainMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPhilcoMainMenuElement: {
        prototype: HTMLPhilcoMainMenuElement;
        new (): HTMLPhilcoMainMenuElement;
    };
    interface HTMLElementTagNameMap {
        "biggive-accordion": HTMLBiggiveAccordionElement;
        "biggive-accordion-entry": HTMLBiggiveAccordionEntryElement;
        "biggive-article-card": HTMLBiggiveArticleCardElement;
        "biggive-back-to-top": HTMLBiggiveBackToTopElement;
        "biggive-basic-card": HTMLBiggiveBasicCardElement;
        "biggive-biography-card": HTMLBiggiveBiographyCardElement;
        "biggive-boxed-content": HTMLBiggiveBoxedContentElement;
        "biggive-branded-image": HTMLBiggiveBrandedImageElement;
        "biggive-button": HTMLBiggiveButtonElement;
        "biggive-call-to-action": HTMLBiggiveCallToActionElement;
        "biggive-campaign-card": HTMLBiggiveCampaignCardElement;
        "biggive-campaign-card-filter-grid": HTMLBiggiveCampaignCardFilterGridElement;
        "biggive-campaign-highlights": HTMLBiggiveCampaignHighlightsElement;
        "biggive-container-card": HTMLBiggiveContainerCardElement;
        "biggive-cookie-banner": HTMLBiggiveCookieBannerElement;
        "biggive-footer": HTMLBiggiveFooterElement;
        "biggive-form": HTMLBiggiveFormElement;
        "biggive-form-field-select": HTMLBiggiveFormFieldSelectElement;
        "biggive-formatted-text": HTMLBiggiveFormattedTextElement;
        "biggive-grid": HTMLBiggiveGridElement;
        "biggive-heading": HTMLBiggiveHeadingElement;
        "biggive-heading-banner": HTMLBiggiveHeadingBannerElement;
        "biggive-hero-image": HTMLBiggiveHeroImageElement;
        "biggive-icon-button": HTMLBiggiveIconButtonElement;
        "biggive-image": HTMLBiggiveImageElement;
        "biggive-image-button": HTMLBiggiveImageButtonElement;
        "biggive-image-card": HTMLBiggiveImageCardElement;
        "biggive-image-feature": HTMLBiggiveImageFeatureElement;
        "biggive-main-menu": HTMLBiggiveMainMenuElement;
        "biggive-misc-icon": HTMLBiggiveMiscIconElement;
        "biggive-nav-group": HTMLBiggiveNavGroupElement;
        "biggive-nav-item": HTMLBiggiveNavItemElement;
        "biggive-page-column": HTMLBiggivePageColumnElement;
        "biggive-page-columns": HTMLBiggivePageColumnsElement;
        "biggive-page-section": HTMLBiggivePageSectionElement;
        "biggive-popup": HTMLBiggivePopupElement;
        "biggive-progress-bar": HTMLBiggiveProgressBarElement;
        "biggive-quote": HTMLBiggiveQuoteElement;
        "biggive-sheet": HTMLBiggiveSheetElement;
        "biggive-social-icon": HTMLBiggiveSocialIconElement;
        "biggive-tab": HTMLBiggiveTabElement;
        "biggive-tabbed-content": HTMLBiggiveTabbedContentElement;
        "biggive-table": HTMLBiggiveTableElement;
        "biggive-text-input": HTMLBiggiveTextInputElement;
        "biggive-timeline": HTMLBiggiveTimelineElement;
        "biggive-timeline-entry": HTMLBiggiveTimelineEntryElement;
        "biggive-totalizer": HTMLBiggiveTotalizerElement;
        "biggive-totalizer-ticker-item": HTMLBiggiveTotalizerTickerItemElement;
        "biggive-video": HTMLBiggiveVideoElement;
        "biggive-video-feature": HTMLBiggiveVideoFeatureElement;
        "philco-footer": HTMLPhilcoFooterElement;
        "philco-main-menu": HTMLPhilcoMainMenuElement;
    }
}
declare namespace LocalJSX {
    interface BiggiveAccordion {
        /**
          * @default 'primary'
         */
        "headingColour"?: brandColour;
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
        /**
          * @default 'black'
         */
        "textColour"?: brandColour;
    }
    interface BiggiveAccordionEntry {
        /**
          * @default ''
         */
        "heading"?: string;
    }
    interface BiggiveArticleCard {
        /**
          * @default 'white'
         */
        "backgroundColour"?: brandColour;
        /**
          * @default ''
         */
        "backgroundImageUrl"?: string;
        /**
          * @default 'black'
         */
        "buttonColour"?: brandColour;
        "buttonLabel"?: string;
        "buttonUrl"?: string;
        /**
          * @default true
         */
        "clipBottomLeftCorner"?: boolean;
        /**
          * @default true
         */
        "clipTopRightCorner"?: boolean;
        "date"?: string;
        /**
          * @default 'black'
         */
        "dateColour"?: brandColour;
        "image1AltText"?: string;
        "image1Url"?: string;
        "image2AltText"?: string;
        "image2Url"?: string;
        "imageLabel"?: string;
        /**
          * @default 'black'
         */
        "imageLabelColour"?: brandColour;
        "mainImageAltText"?: string;
        "mainImageUrl"?: string;
        "mainTitle"?: string;
        /**
          * @default 'black'
         */
        "mainTitleColour"?: brandColour;
        "slug"?: string;
        /**
          * @default 'black'
         */
        "slugColour"?: brandColour;
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
    }
    interface BiggiveBackToTop {
    }
    interface BiggiveBasicCard {
        /**
          * @default false
         */
        "addAnimation"?: boolean;
        /**
          * @default ''
         */
        "author"?: string;
        /**
          * @default 'primary'
         */
        "backgroundColour"?: brandColour;
        /**
          * @default ''
         */
        "backgroundImageUrl"?: string;
        /**
          * @default 'center'
         */
        "buttonAlign"?: string;
        /**
          * @default 'clear-primary'
         */
        "buttonColourScheme"?: string;
        "buttonLabel"?: string;
        /**
          * @default 'standard'
         */
        "buttonStyle"?: string;
        "buttonUrl"?: string;
        /**
          * @default 'white'
         */
        "cardColour"?: brandColour;
        /**
          * @default true
         */
        "clipBottomLeftCorner"?: boolean;
        /**
          * @default true
         */
        "clipTopRightCorner"?: boolean;
        /**
          * @default ''
         */
        "date"?: string;
        /**
          * @default 3
         */
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default true
         */
        "icon"?: boolean;
        /**
          * @default 'primary'
         */
        "iconColour"?: brandColour;
        "mainImageAltText"?: string;
        /**
          * @default undefined
         */
        "mainImageUrl"?: string;
        "mainTitle"?: string;
        /**
          * @default 'biggive'
         */
        "siteDesign"?: 'biggive' | 'philco';
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
        /**
          * @default ''
         */
        "subtitle"?: string;
        "teaser"?: string;
        /**
          * @default 'black'
         */
        "textColour"?: brandColour;
    }
    interface BiggiveBiographyCard {
        /**
          * @default 'white'
         */
        "backgroundColour"?: brandColour;
        /**
          * @default 0
         */
        "borderWidth"?: spacingOption;
        /**
          * @default false
         */
        "circle"?: boolean;
        /**
          * @default 'light'
         */
        "circleColour"?: 'light' | 'dark';
        /**
          * @default ''
         */
        "fullName"?: string;
        /**
          * @default 'cover'
         */
        "imageStyle"?: 'cover' | 'contain';
        /**
          * @default ''
         */
        "imageUrl"?: string;
        /**
          * @default ''
         */
        "jobTitle"?: string;
        /**
          * @default '1,1.5'
         */
        "ratio"?: '1,1' | '1,1.5' | '1,2';
        /**
          * @default false
         */
        "rounded"?: boolean;
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
        /**
          * @default 'left'
         */
        "textAlign"?: 'center' | 'left' | 'right';
        /**
          * @default 'black'
         */
        "textColour"?: brandColour;
        /**
          * @default ''
         */
        "url"?: string;
    }
    interface BiggiveBoxedContent {
        /**
          * Background colour
          * @default 'white'
         */
        "backgroundColour"?: string;
        /**
          * Horizontal padding
          * @default 3
         */
        "horizontalPadding"?: number;
        /**
          * Shadow
          * @default true
         */
        "shadow"?: boolean;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
        /**
          * Vertical padding
          * @default 3
         */
        "verticalPadding"?: number;
    }
    interface BiggiveBrandedImage {
        /**
          * Charity location
         */
        "charityLocation"?: string;
        /**
          * Charity name
         */
        "charityName"?: string;
        /**
          * Link to the charity's website
          * @deprecated We should stop passing this soon, and will link to charity URLs alongside socials.
         */
        "charityUrl"?: string;
        /**
          * Full URL of a image.
          * @default ''
         */
        "imageUrl"?: string;
        /**
          * Full URL of the logo.
          * @default ''
         */
        "logoUrl"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggiveButton {
        /**
          * @default undefined
         */
        "buttonId"?: undefined | string;
        /**
          * Centered
          * @default false
         */
        "centered"?: boolean;
        /**
          * Colour Scheme
          * @default 'primary'
         */
        "colourScheme"?: brandColour;
        /**
          * For use only in philco site - the Big Give site does not use disabled buttons and does not have a design for such.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Display full width
          * @default false
         */
        "fullWidth"?: boolean;
        /**
          * Text
          * @default 'Click me'
         */
        "label"?: string;
        "onDoButtonClick"?: (event: BiggiveButtonCustomEvent<{ event: object; url: string }>) => void;
        /**
          * New Tab
          * @default false
         */
        "openInNewTab"?: boolean;
        /**
          * Rounded corners
          * @default false
         */
        "rounded"?: boolean;
        /**
          * @default 'biggive'
         */
        "siteDesign"?: 'biggive' | 'philco';
        /**
          * Size
          * @default 'medium'
         */
        "size"?: string;
        /**
          * Space below component
          * @default 1
         */
        "spaceBelow"?: number;
        /**
          * URL
         */
        "url"?: string | undefined;
    }
    interface BiggiveCallToAction {
        /**
          * Default text colour
          * @default 'primary'
         */
        "defaultTextColour"?: string;
        /**
          * Main title
         */
        "mainTitle"?: string;
        /**
          * Main title colour
          * @default ''
         */
        "mainTitleColour"?: string;
        /**
          * Main title size
          * @default 2
         */
        "mainTitleSize"?: number;
        /**
          * Primary button Colour Scheme
          * @default 'primary'
         */
        "primaryButtonColourScheme"?: string;
        /**
          * Primary button Label
         */
        "primaryButtonLabel"?: string;
        /**
          * Primary button Url
         */
        "primaryButtonUrl"?: string;
        /**
          * Secondary button Colour Scheme
          * @default 'primary'
         */
        "secondaryButtonColourScheme"?: string;
        /**
          * Secondary button Label
         */
        "secondaryButtonLabel"?: string;
        /**
          * Secondary button Url
         */
        "secondaryButtonUrl"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Slug colour
          * @default ''
         */
        "slugColour"?: string;
        /**
          * Slug size
          * @default 4
         */
        "slugSize"?: number;
        /**
          * Space above component
          * @default 0
         */
        "spaceAbove"?: number;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
        /**
          * Subtitle
         */
        "subtitle"?: string;
        /**
          * Subtitle colour
          * @default ''
         */
        "subtitleColour"?: string;
        /**
          * Main title size
          * @default 4
         */
        "subtitleSize"?: number;
        /**
          * Teaser
         */
        "teaser"?: string;
        /**
          * Teaser colour
          * @default ''
         */
        "teaserColour"?: string;
    }
    interface BiggiveCampaignCard {
        /**
          * Full URL of a banner image.
         */
        "banner"?: string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle"?: string;
        /**
          * e.g. "Match Funded".
         */
        "campaignType"?: string;
        /**
          * To be used alongside isFutureCampaign = true or isPastCampaign = true. If either is true, we render out: 'Launches: ' + datetime or 'Closed: ' + datetime. Preferred format: DD/MM/YYYY, HH:MM DON-661.
         */
        "datetime"?: string;
        /**
          * Donate button colour scheme
          * @default 'primary'
         */
        "donateButtonColourScheme"?: string;
        /**
          * Donate button label
          * @default 'Donate now'
         */
        "donateButtonLabel"?: string;
        /**
          * Donate button url
         */
        "donateButtonUrl"?: string;
        /**
          * Boolean flag telling the component if the campaign is in the future (not open yet).
          * @default false
         */
        "isFutureCampaign"?: boolean;
        /**
          * Boolean flag telling the component if the campaign is in the future (not open yet).
          * @default false
         */
        "isPastCampaign"?: boolean;
        /**
          * Donate button colour scheme
          * @default 'clear-primary'
         */
        "moreInfoButtonColourScheme"?: string;
        /**
          * More information button label
          * @default 'Find out more'
         */
        "moreInfoButtonLabel"?: string;
        /**
          * More information button url
         */
        "moreInfoButtonUrl"?: string;
        "onDoCardGeneralClick"?: (event: BiggiveCampaignCardCustomEvent<{ event: object; url: string }>) => void;
        /**
          * Display name of the charity or non-profit.
         */
        "organisationName"?: string;
        /**
          * Amount for the primary figure, formatted with currency symbol – null or omit to hide the figure & label.
         */
        "primaryFigureAmount"?: string | null;
        /**
          * Label for the primary figure – may be null or omitted for no label or if there's no figure.
         */
        "primaryFigureLabel"?: string | null;
        /**
          * Progress bar percentage – null or omit to hide the progress bar.
         */
        "progressBarCounter"?: number | null;
        /**
          * Amount for the secondary figure, formatted with currency symbol – null or omit to hide the figure & label.
         */
        "secondaryFigureAmount"?: string | null;
        /**
          * Label for the secondary figure – may be null or omitted for no label or if there's no figure.
         */
        "secondaryFigureLabel"?: string | null;
        /**
          * Space below component
          * @default 4
         */
        "spaceBelow"?: number;
    }
    interface BiggiveCampaignCardFilterGrid {
        /**
          * JSON array of beneficiary key/values, or takes a stringified equiavalent (for Storybook)
         */
        "beneficiaryOptions"?: string | Record<string, string> | string[];
        /**
          * Defines the text on the search button
          * @default 'Search'
         */
        "buttonText"?: string;
        /**
          * JSON array of category key/values, or takes a stringified equiavalent (for Storybook)
         */
        "categoryOptions"?: string | Record<string, string> | string[];
        /**
          * Intro
          * @default 'Find a charity or project'
         */
        "intro"?: string;
        /**
          * JSON array of location key/values, or takes a stringified equiavalent (for Storybook)
         */
        "locationOptions"?: string | Record<string, string> | string[];
        /**
          * This event `doSearchAndFilterUpdate` event is emitted and propogates to the parent component which handles it
         */
        "onDoSearchAndFilterUpdate"?: (event: BiggiveCampaignCardFilterGridCustomEvent<{
    searchText: string | null;
    sortBy: string | null;
    filterCategory: string | null;
    filterBeneficiary: string | null;
    filterLocation: string | null;
  }>) => void;
        /**
          * Defines the text displayed as the placeholder in the input field before the user types anything
          * @default 'Search'
         */
        "placeholderText"?: string;
        /**
          * Optional search text prop. Useful for pre-populating the search field when the page is loaded with a search term already existing in the URL. This can happen when sharing links, or if a donor goes to a campaign page after searching, and then returns to the search results. In such a case, the search box text will clear, unless we use this prop to populate it on rendering. DON-652.
          * @default null
         */
        "searchText"?: string | null;
        /**
          * For injecting the chosen beneficiary to filter by, as per the comment above for `selectedSortByOption`.
          * @default null
         */
        "selectedFilterBeneficiary"?: string | null;
        /**
          * For injecting the chosen category to filter by, as per the comment above for `selectedSortByOption`.
          * @default null
         */
        "selectedFilterCategory"?: string | null;
        /**
          * For injecting the chosen location to filter by, as per the comment above for `selectedSortByOption`.
          * @default null
         */
        "selectedFilterLocation"?: string | null;
        /**
          * This helps us inject a pre-selected dropdown value from outside of this component. This is especially helpful for the Meta campaign and Explore pages, where searching by text wipes out previous sort options and re-uses Relevance, or where one of those two pages is loaded directly with URL parameters - in such a scenario the dropdown shows that it's pre-selected. DON-558.
         */
        "selectedSortByOption"?: sortOptionLabel;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggiveCampaignHighlights {
        /**
          * Full URL of a banner image.
         */
        "banner"?: string;
        /**
          * Display name of the charity's specific time-bound fundraising campaign.
         */
        "campaignTitle"?: string;
        /**
          * Champion's name
         */
        "championName"?: string;
        /**
          * Link to all meta-campaigns funded by this champion. For example: /christmas-challenge-2022/the-reed-foundation-22 In other words, it follows the following format: '/' + campaign.parentRef + '/' + campaign.championRef
         */
        "championUrl"?: string;
        /**
          * Amount for the primary figure, formatted with currency symbol
         */
        "primaryFigureAmount"?: string;
        /**
          * Label for the primary figure
         */
        "primaryFigureLabel"?: string;
        /**
          * Primary stat icon
         */
        "primaryStatIcon"?: string;
        /**
          * Primary stat text
         */
        "primaryStatText"?: string;
        /**
          * Progress bar percentage
          * @default 100
         */
        "progressBarCounter"?: number;
        /**
          * Amount for the secondary figure, formatted with currency symbol
         */
        "secondaryFigureAmount"?: string;
        /**
          * Label for the secondary figure
         */
        "secondaryFigureLabel"?: string;
        /**
          * Secondary stat icon
         */
        "secondaryStatIcon"?: string;
        /**
          * Secondary stat text
         */
        "secondaryStatText"?: string;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggiveContainerCard {
        /**
          * @default 'primary'
         */
        "backgroundColour"?: brandColour;
        /**
          * @default ''
         */
        "backgroundImageUrl"?: string;
        /**
          * @default 'white'
         */
        "cardColour"?: brandColour;
        /**
          * @default true
         */
        "clipBottomLeftCorner"?: boolean;
        /**
          * @default true
         */
        "clipTopRightCorner"?: boolean;
        /**
          * @default 3
         */
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
        /**
          * @default 'black'
         */
        "textColour"?: brandColour;
    }
    interface BiggiveCookieBanner {
        /**
          * If true the Preferences modal will be auto-opened - for use when the user has requested to edit their cookie preferences
          * @default false
         */
        "autoOpenPreferences"?: boolean;
        "blogUriPrefix": string;
        /**
          * Indicates that the user accepts cookies for any purpose, without discrimination.
         */
        "onCookieBannerAcceptAllSelected"?: (event: BiggiveCookieBannerCustomEvent<void>) => void;
        /**
          * Indicates that the user has made a selection of cookies purpose to accept.  Event data is an object with boolean properties to say whether the user accepts or refuses each category of optional cookie.  When updating this type please also update the type of previouslyAgreedCookiePreferences.
         */
        "onCookieBannerSavePreferencesSelected"?: (event: BiggiveCookieBannerCustomEvent<{
    analyticsAndTesting: boolean;
    thirdParty: boolean;
  }>) => void;
        "onPreferenceModalClosed"?: (event: BiggiveCookieBannerCustomEvent<void>) => void;
        /**
          * This type is similar to CookiePreferences from donate-frontend/src/app/cookiePreference.service.ts but afaik there isn't a nice way to share a type.  When updating please also update the copy in the type of cookieBannerSavePreferencesSelected - using a named type there caused build problems.  When updating please also update the type of cookieBannerSavePreferencesSelected - I didn't find a way to avoid the duplication.
          * @default undefined
         */
        "previouslyAgreedCookiePreferences"?: | {
        analyticsAndTesting: boolean;
        thirdParty: boolean;
      }
    | undefined;
    }
    /**
     * Should be contained in a `<footer/>` or similar so that the page has appropriate
     * landmarks.
     */
    interface BiggiveFooter {
        "blogUrlPrefix"?: string | undefined;
        /**
          * URL prefixes vary by environment, and components library is not best placed to know what they are, so we take them as props
         */
        "donateUrlPrefix"?: string;
        "experienceUrlPrefix"?: string | undefined;
        /**
          * @default 5
         */
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default false
         */
        "smallCharityWeekEnabled"?: boolean;
        /**
          * Conditionally render footer menu: hard-coded (preset) when set to true, dynamic (slot-based) when set to false
          * @default false
         */
        "usePresetFooter"?: boolean;
    }
    interface BiggiveForm {
    }
    interface BiggiveFormFieldSelect {
        /**
          * Must match background of containing element, or unintended shape will appear.
         */
        "backgroundColour"?: 'white' | 'grey';
        /**
          * JSON array of label+value objects, or takes a stringified equiavalent (for Storybook)
         */
        "options": string | Array<{ label: string; value: string }>;
        /**
          * Placeholder. If there is no `prompt`, this should be a suitable ARIA label.
         */
        "placeholder"?: string | undefined;
        /**
          * Displayed as 'eyebrow' label over the top border of the box.
         */
        "prompt": string | null;
        /**
          * ID for the select element, used by a label. If not passed then a random id will be generated.
         */
        "selectElementId"?: string | undefined;
        /**
          * @default 'bordered'
         */
        "selectStyle"?: 'bordered' | 'underlined';
        "selectedLabel"?: string | null;
        /**
          * @default 'blue'
         */
        "selectedOptionColour"?: 'inherit' | 'blue';
        "selectedValue"?: string | null;
        "selectionChanged"?: (value: string) => void;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggiveFormattedText {
        /**
          * Text colour. If undefined or blank colour will be inherited as normal from containing element.
         */
        "defaultTextColour"?: brandColour | undefined;
        /**
          * @default 100
         */
        "maxWidth"?: number;
        /**
          * @default 'biggive'
         */
        "siteDesign"?: 'biggive' | 'philco';
        /**
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggiveGrid {
        /**
          * @default 3
         */
        "columnCount"?: number;
        /**
          * @default 0
         */
        "columnGap"?: spacingOption;
        /**
          * @default 4
         */
        "spaceBelow"?: number;
        /**
          * Deprecated - should use columGap Instead
          * @default false
         */
        "spaceBetween"?: boolean;
    }
    interface BiggiveHeading {
        /**
          * @default 'left'
         */
        "align"?: string;
        /**
          * @default 'primary'
         */
        "colour"?: brandColour;
        /**
          * @default 'h1'
         */
        "htmlElement"?: headingTag;
        /**
          * @default false
         */
        "icon"?: boolean;
        /**
          * @default 'primary'
         */
        "iconColour"?: brandColour;
        /**
          * @default 'biggive'
         */
        "siteDesign"?: 'biggive' | 'philco';
        /**
          * @default 1
         */
        "size"?: headingSize;
        /**
          * @default 2
         */
        "spaceAbove"?: spacingOption;
        /**
          * @default 4
         */
        "spaceBelow"?: spacingOption;
        /**
          * @default ''
         */
        "text"?: string;
    }
    /**
     * Heading banner component for use as a page header.
     * This component provides a banner with a background image, optional logo, and text content.
     * It supports different heights and customizable colors.
     */
    interface BiggiveHeadingBanner {
        /**
          * Background color for the banner
         */
        "backgroundColour": string;
        /**
          * Focal point for the image positioning x and y values are percentages (0-100)
         */
        "focalPoint": string | { x: number; y: number };
        /**
          * Height variant of the banner 'tall' for full height, 'short' for reduced height
          * @default 'tall'
         */
        "height"?: 'short' | 'tall';
        /**
          * Optional logo object with URL and alt text
         */
        "logo"?: { url: string; alt?: string } | string;
        /**
          * URL for the main banner image
         */
        "mainImageUrl": string;
        /**
          * Main title text for the banner
         */
        "mainTitle": string;
        /**
          * Optional slightly smaller text to appear above the main title
          * @default ''
         */
        "slug"?: string;
        /**
          * Optional teaser text that appears below the main title
         */
        "teaser": string;
        /**
          * Background color for the text content area
         */
        "textBackgroundColour": string;
        /**
          * Text color for all text content
         */
        "textColour": string;
    }
    interface BiggiveHeroImage {
        /**
          * Button Colour Scheme
          * @default 'primary'
         */
        "buttonColourScheme"?: brandColour;
        /**
          * Button Label
         */
        "buttonLabel"?: string;
        /**
          * Button Url
         */
        "buttonUrl"?: string;
        /**
          * Colour Scheme
          * @default 'primary'
         */
        "colourScheme"?: brandColour;
        /**
          * Full URL of a logo image.
          * @default ''
         */
        "logo"?: string;
        /**
          * Logo alt text
          * @default ''
         */
        "logoAltText"?: string;
        /**
          * Logo container height selection. Numbers are not measurements.
          * @default 3
         */
        "logoHeight"?: 1|2|3|4|5|6|7|8|9|10;
        /**
          * Full URL of a main hero image.
          * @default null
         */
        "mainImage"?: string|null;
        /**
          * Horizontal alignment of image
          * @default 'center'
         */
        "mainImageAlignHorizontal"?: string;
        /**
          * Vertical alignment of image
          * @default 'center'
         */
        "mainImageAlignVertical"?: string;
        /**
          * Determines whether the main image is clipped to a triangle shape (default) or used as a background for the entire component. Clipping can leave a lot of blank space.
          * @default 'triangle'
         */
        "mainImageShape"?: 'triangle'|'rectangle';
        /**
          * Hero image title, typically the page.
         */
        "mainTitle"?: string;
        /**
          * Main title colour
         */
        "mainTitleColour"?: brandColour;
        /**
          * Header slug
         */
        "slug"?: string;
        /**
          * Header slug colour
         */
        "slugColour"?: brandColour;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: spacingOption;
        /**
          * Introductory teaser text
         */
        "teaser"?: string|undefined;
        /**
          * Teaser colour
         */
        "teaserColour"?: brandColour;
    }
    interface BiggiveIconButton {
        /**
          * @default false
         */
        "arrow"?: boolean;
        /**
          * @default 'black'
         */
        "arrowColour"?: brandColour;
        /**
          * @default 'white'
         */
        "backgroundColour"?: brandColour;
        /**
          * @default 0
         */
        "backgroundPadding"?: spacingOption;
        /**
          * @default undefined
         */
        "buttonId"?: undefined | string;
        /**
          * @default false
         */
        "centered"?: boolean;
        /**
          * @default false
         */
        "circle"?: boolean;
        "icon"?: string;
        "onDoButtonClick"?: (event: BiggiveIconButtonCustomEvent<{ event: object; url: string }>) => void;
        /**
          * @default false
         */
        "openInNewTab"?: boolean;
        /**
          * @default false
         */
        "rounded"?: boolean;
        /**
          * @default false
         */
        "shadow"?: boolean;
        /**
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
        /**
          * @default 1
         */
        "spaceBelow"?: spacingOption;
        "text"?: string;
        /**
          * @default 'black'
         */
        "textColour"?: brandColour;
        "url"?: string;
    }
    interface BiggiveImage {
        /**
          * Image width
          * @default 0
         */
        "height"?: number;
        /**
          * Image alt text tag.
          * @default ''
         */
        "imageAltText"?: string;
        /**
          * Full URL of a image.
          * @default ''
         */
        "imageUrl"?: string;
        /**
          * Size unit
          * @default 'px'
         */
        "sizeUnit"?: string;
        /**
          * Space above component
          * @default 0
         */
        "spaceAbove"?: number;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
        /**
          * Image width
          * @default 0
         */
        "width"?: number;
    }
    interface BiggiveImageButton {
        /**
          * @default false
         */
        "arrow"?: boolean;
        /**
          * @default 'black'
         */
        "arrowColour"?: brandColour;
        /**
          * @default 'white'
         */
        "backgroundColour"?: brandColour;
        /**
          * @default 0
         */
        "backgroundPadding"?: spacingOption;
        /**
          * @default undefined
         */
        "buttonId"?: undefined | string;
        /**
          * @default false
         */
        "centered"?: boolean;
        /**
          * @default false
         */
        "circle"?: boolean;
        /**
          * @default 'cover'
         */
        "imageStyle"?: string;
        "imageUrl"?: string;
        "onDoButtonClick"?: (event: BiggiveImageButtonCustomEvent<{ event: object; url: string }>) => void;
        /**
          * @default false
         */
        "openInNewTab"?: boolean;
        /**
          * @default false
         */
        "rounded"?: boolean;
        /**
          * @default false
         */
        "shadow"?: boolean;
        /**
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large' | 'x-large' | 'xx-large';
        /**
          * @default 1
         */
        "spaceBelow"?: spacingOption;
        "text"?: string;
        /**
          * @default 'black'
         */
        "textColour"?: brandColour;
        "url"?: string;
    }
    interface BiggiveImageCard {
        /**
          * @default false
         */
        "addAnimation"?: boolean;
        /**
          * @default 'primary'
         */
        "backgroundColour"?: brandColour;
        /**
          * @default 'center'
         */
        "buttonAlign"?: string;
        /**
          * @default 'clear-primary'
         */
        "buttonColourScheme"?: string;
        "buttonLabel"?: string;
        /**
          * @default 'standard'
         */
        "buttonStyle"?: string;
        "buttonUrl"?: string;
        /**
          * @default true
         */
        "clipBottomLeftCorner"?: boolean;
        /**
          * @default true
         */
        "clipTopRightCorner"?: boolean;
        "mainImageAltText"?: string;
        "mainImageUrl"?: string;
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
        "teaser"?: string;
        /**
          * @default 'black'
         */
        "teaserColour"?: brandColour;
        /**
          * @default 'center'
         */
        "textAlign"?: 'left' | 'center' | 'right';
    }
    interface BiggiveImageFeature {
        /**
          * Button Colour Scheme
          * @default 'primary'
         */
        "buttonColourScheme"?: string;
        /**
          * Button Label
         */
        "buttonLabel"?: string;
        /**
          * Button Url
         */
        "buttonUrl"?: string;
        /**
          * Default text colour
          * @default 'primary'
         */
        "defaultTextColour"?: string;
        /**
          * Image alt text tag.
          * @default ''
         */
        "imageAltText"?: string;
        /**
          * Full URL of a image.
          * @default ''
         */
        "imageUrl"?: string;
        /**
          * Video title
         */
        "mainTitle"?: string;
        /**
          * Slug colour
          * @default ''
         */
        "mainTitleColour"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Slug colour
          * @default ''
         */
        "slugColour"?: string;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
        /**
          * Introductory teaser text
         */
        "teaser"?: string;
        /**
          * Teaser colour
          * @default ''
         */
        "teaserColour"?: string;
    }
    interface BiggiveMainMenu {
        /**
          * @default 'https://biggive.org'
         */
        "blogUrlPrefix"?: string;
        /**
          * @default 'https://donate.biggive.org'
         */
        "donateUrlPrefix"?: string;
        /**
          * @default 'https://community.biggive.org'
         */
        "experienceUrlPrefix"?: string;
        /**
          * Whether the current user is logged in (i.e. is assumed to have a valid JWT). They get links to some extra content if they are.
          * @default false
         */
        "isLoggedIn"?: boolean;
        "onLogoutClicked"?: (event: BiggiveMainMenuCustomEvent<void>) => void;
        /**
          * @default false
         */
        "smallCharityWeekEnabled"?: boolean;
        /**
          * We don't want to make the ?noredirect version proliferate too much so err on not including this. We also don't really want every single page to have to get highlight cards to set this property. So for now, typically only meta-campaign bothers to get the correct value to set this true if appropriate. That's the page which is the destination of the redirect so is arguably the only place where it's essential that the menu lets you go to the 'normal' home page.
          * @default false
         */
        "someCampaignHasHomePageRedirect"?: boolean;
    }
    interface BiggiveMiscIcon {
        /**
          * Background colour
          * @default 'primary'
         */
        "backgroundColour"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Background colour
          * @default 'white'
         */
        "iconColour"?: string;
        /**
          * Url
         */
        "url"?: string;
    }
    interface BiggiveNavGroup {
        /**
          * Inline
          * @default true
         */
        "inline"?: boolean;
    }
    interface BiggiveNavItem {
        /**
          * URL
         */
        "iconColour"?: string;
        /**
          * Label
         */
        "label"?: string;
        /**
          * URL
         */
        "url"?: string;
    }
    interface BiggivePageColumn {
    }
    interface BiggivePageColumns {
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggivePageSection {
        /**
          * Colour scheme
         */
        "colourScheme"?: string;
        /**
          * Width
          * @default 100
         */
        "maxWidth"?: number;
        /**
          * Bleeds the primary brand colour to the left and right edge of the viewport, even if used within a containing block element.
          * @default false
         */
        "primaryFullBleed"?: boolean;
        /**
          * Section style bottom
          * @default 'straight'
         */
        "sectionStyleBottom"?: sectionStyle;
        /**
          * Section style top
          * @default 'straight'
         */
        "sectionStyleTop"?: sectionStyle;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggivePopup {
        /**
          * Function to execute when the modal is closed, whether by the user or programmatically.
          * @default () => {}
         */
        "modalClosedCallback"?: () => void;
    }
    interface BiggiveProgressBar {
        /**
          * Colour Scheme
          * @default 'primary'
         */
        "colourScheme"?: string;
        /**
          * Percentage to show + use for CSS width; round before input if desired
          * @default 100
         */
        "counter"?: number | null;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggiveQuote {
        /**
          * @default ''
         */
        "attribution"?: string;
        /**
          * @default 'black'
         */
        "defaultTextColour"?: brandColour;
        /**
          * @default ''
         */
        "quote"?: string;
        /**
          * @default 'primary'
         */
        "quoteIconColour"?: brandColour;
        /**
          * @default 'biggive'
         */
        "siteDesign"?: 'biggive' | 'philco';
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
    }
    interface BiggiveSheet {
        /**
          * @default 'primary'
         */
        "backgroundColour"?: brandColour;
        /**
          * A string ID (no spaces) unique within the page context, used to trigger the opening of the sheet from an anchor hash.
          * @default ''
         */
        "sheetId"?: string;
        /**
          * @default 'white'
         */
        "textColour"?: brandColour;
    }
    /**
     * Used to indicate and link to a charity's social page, or their own web site.
     */
    interface BiggiveSocialIcon {
        /**
          * Background colour
          * @default 'primary'
         */
        "backgroundColour"?: string;
        /**
          * Icon colour
          * @default 'white'
         */
        "iconColour"?: string;
        /**
          * Used within accessible labels for links. Typically a charity name or "Big Give". Can also be "Share".
          * @default 'Big Give'
         */
        "labelPrefix"?: string;
        /**
          * Service name
         */
        "service": 'Facebook' | 'Instagram' | 'LinkedIn' | 'Twitter' | 'Web' | 'Whatsapp' | 'YouTube';
        /**
          * Url
          * @default '#'
         */
        "url"?: string;
        /**
          * Used in the social icons in the biggive-footer, which are more spaced out than others across the site. COM-43.
          * @default false
         */
        "wide"?: boolean;
    }
    interface BiggiveTab {
        /**
          * @default ''
         */
        "tabTitle"?: string;
    }
    interface BiggiveTabbedContent {
        /**
          * @default 'white'
         */
        "buttonBackgroundColour"?: brandColour;
        /**
          * @default 'primary'
         */
        "buttonIconColour"?: brandColour;
        /**
          * @default 'grey-medium'
         */
        "navigationHighlightColour"?: brandColour;
        /**
          * @default 'primary'
         */
        "selectedNavigationHighlightColour"?: brandColour;
        /**
          * @default 'primary'
         */
        "selectedTextColour"?: brandColour;
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
        /**
          * @default 'black'
         */
        "textColour"?: brandColour;
    }
    interface BiggiveTable {
        /**
          * @default 'grey-light'
         */
        "bodyBackgroundColour"?: brandColour;
        /**
          * @default 'black'
         */
        "bodyTextColour"?: brandColour;
        /**
          * @default 'white'
         */
        "headerBackgroundColour"?: brandColour;
        /**
          * @default 'primary'
         */
        "headerTextColour"?: brandColour;
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
    }
    /**
     * Initially developed for use within the new donate stepper design. Currently has a hard-coded background
     * of $colour-grey-background, intened to appear transparent when used on a page with a matching background.
     * Please ensure input is styled as width: 100%.
     * Requires slots `label` and `input`.
     */
    interface BiggiveTextInput {
        /**
          * ISO-4217 currency code if input is for a money value
         */
        "currency"?: 'GBP' | 'USD' | undefined;
        /**
          * @default 'bordered'
         */
        "selectStyle"?: 'bordered' | 'underlined';
        /**
          * @default 'biggive'
         */
        "siteDesign"?: 'biggive' | 'philco';
        /**
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggiveTimeline {
        /**
          * @default 'white'
         */
        "buttonBackgroundColour"?: brandColour;
        /**
          * @default 'primary'
         */
        "buttonIconColour"?: brandColour;
        /**
          * @default 'white'
         */
        "entryBackgroundColour"?: brandColour;
        /**
          * @default 'black'
         */
        "entryDateColour"?: brandColour;
        /**
          * @default 'secondary'
         */
        "entryHighlightColour"?: brandColour;
        /**
          * @default 'black'
         */
        "entryTextColour"?: brandColour;
        /**
          * @default 'primary'
         */
        "entryTitleColour"?: brandColour;
        /**
          * @default 'grey-medium'
         */
        "navigationHighlightColour"?: brandColour;
        /**
          * @default 'primary'
         */
        "selectedNavigationHighlightColour"?: brandColour;
        /**
          * @default 'primary'
         */
        "selectedTextColour"?: brandColour;
        /**
          * @default 0
         */
        "spaceBelow"?: spacingOption;
        /**
          * @default 'black'
         */
        "textColour"?: brandColour;
    }
    interface BiggiveTimelineEntry {
        /**
          * Should be in the format 'YYYY-mm-dd', for example '2023-01-01'
         */
        "date"?: string;
        "heading"?: string;
    }
    interface BiggiveTotalizer {
        /**
          * Primary message
         */
        "mainMessage"?: string;
        /**
          * Primary banner colour
          * @default 'primary'
         */
        "primaryColour"?: string;
        /**
          * Primary text colour
          * @default 'white'
         */
        "primaryTextColour"?: string;
        /**
          * Secondary banner colour
          * @default 'secondary'
         */
        "secondaryColour"?: string;
        /**
          * Secondary text colour
          * @default 'black'
         */
        "secondaryTextColour"?: string;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
    }
    interface BiggiveTotalizerTickerItem {
        /**
          * Figure
         */
        "figure"?: string;
        /**
          * Figure
         */
        "label"?: string;
    }
    interface BiggiveVideo {
        /**
          * Space above component
          * @default 0
         */
        "spaceAbove"?: number;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
        /**
          * Full URL of a video.
          * @default ''
         */
        "videoUrl"?: string;
    }
    interface BiggiveVideoFeature {
        /**
          * Button Colour Scheme
          * @default 'primary'
         */
        "buttonColourScheme"?: string;
        /**
          * Button Label
         */
        "buttonLabel"?: string;
        /**
          * Button Url
         */
        "buttonUrl"?: string;
        /**
          * Default text colour
          * @default 'primary'
         */
        "defaultTextColour"?: string;
        /**
          * Video title
         */
        "mainTitle"?: string;
        /**
          * Slug colour
          * @default ''
         */
        "mainTitleColour"?: string;
        /**
          * Slug
         */
        "slug"?: string;
        /**
          * Slug colour
          * @default ''
         */
        "slugColour"?: string;
        /**
          * Space above component
          * @default 0
         */
        "spaceAbove"?: number;
        /**
          * Space below component
          * @default 0
         */
        "spaceBelow"?: number;
        /**
          * Introductory teaser text
         */
        "teaser"?: string;
        /**
          * Teaser colour
          * @default ''
         */
        "teaserColour"?: string;
        /**
          * Full URL of a video.
          * @default ''
         */
        "videoUrl"?: string;
    }
    /**
     * Should be contained in a `<footer/>` or similar so that the page has appropriate
     * landmarks.
     */
    interface PhilcoFooter {
        /**
          * @default 5
         */
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * @default 'https://philco.org.uk/'
         */
        "philcoUrlPrefix"?: string;
    }
    interface PhilcoMainMenu {
        "onLogoutClicked"?: (event: PhilcoMainMenuCustomEvent<void>) => void;
        "philcoUrlPrefix"?: string;
    }
    interface IntrinsicElements {
        "biggive-accordion": BiggiveAccordion;
        "biggive-accordion-entry": BiggiveAccordionEntry;
        "biggive-article-card": BiggiveArticleCard;
        "biggive-back-to-top": BiggiveBackToTop;
        "biggive-basic-card": BiggiveBasicCard;
        "biggive-biography-card": BiggiveBiographyCard;
        "biggive-boxed-content": BiggiveBoxedContent;
        "biggive-branded-image": BiggiveBrandedImage;
        "biggive-button": BiggiveButton;
        "biggive-call-to-action": BiggiveCallToAction;
        "biggive-campaign-card": BiggiveCampaignCard;
        "biggive-campaign-card-filter-grid": BiggiveCampaignCardFilterGrid;
        "biggive-campaign-highlights": BiggiveCampaignHighlights;
        "biggive-container-card": BiggiveContainerCard;
        "biggive-cookie-banner": BiggiveCookieBanner;
        "biggive-footer": BiggiveFooter;
        "biggive-form": BiggiveForm;
        "biggive-form-field-select": BiggiveFormFieldSelect;
        "biggive-formatted-text": BiggiveFormattedText;
        "biggive-grid": BiggiveGrid;
        "biggive-heading": BiggiveHeading;
        "biggive-heading-banner": BiggiveHeadingBanner;
        "biggive-hero-image": BiggiveHeroImage;
        "biggive-icon-button": BiggiveIconButton;
        "biggive-image": BiggiveImage;
        "biggive-image-button": BiggiveImageButton;
        "biggive-image-card": BiggiveImageCard;
        "biggive-image-feature": BiggiveImageFeature;
        "biggive-main-menu": BiggiveMainMenu;
        "biggive-misc-icon": BiggiveMiscIcon;
        "biggive-nav-group": BiggiveNavGroup;
        "biggive-nav-item": BiggiveNavItem;
        "biggive-page-column": BiggivePageColumn;
        "biggive-page-columns": BiggivePageColumns;
        "biggive-page-section": BiggivePageSection;
        "biggive-popup": BiggivePopup;
        "biggive-progress-bar": BiggiveProgressBar;
        "biggive-quote": BiggiveQuote;
        "biggive-sheet": BiggiveSheet;
        "biggive-social-icon": BiggiveSocialIcon;
        "biggive-tab": BiggiveTab;
        "biggive-tabbed-content": BiggiveTabbedContent;
        "biggive-table": BiggiveTable;
        "biggive-text-input": BiggiveTextInput;
        "biggive-timeline": BiggiveTimeline;
        "biggive-timeline-entry": BiggiveTimelineEntry;
        "biggive-totalizer": BiggiveTotalizer;
        "biggive-totalizer-ticker-item": BiggiveTotalizerTickerItem;
        "biggive-video": BiggiveVideo;
        "biggive-video-feature": BiggiveVideoFeature;
        "philco-footer": PhilcoFooter;
        "philco-main-menu": PhilcoMainMenu;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "biggive-accordion": LocalJSX.BiggiveAccordion & JSXBase.HTMLAttributes<HTMLBiggiveAccordionElement>;
            "biggive-accordion-entry": LocalJSX.BiggiveAccordionEntry & JSXBase.HTMLAttributes<HTMLBiggiveAccordionEntryElement>;
            "biggive-article-card": LocalJSX.BiggiveArticleCard & JSXBase.HTMLAttributes<HTMLBiggiveArticleCardElement>;
            "biggive-back-to-top": LocalJSX.BiggiveBackToTop & JSXBase.HTMLAttributes<HTMLBiggiveBackToTopElement>;
            "biggive-basic-card": LocalJSX.BiggiveBasicCard & JSXBase.HTMLAttributes<HTMLBiggiveBasicCardElement>;
            "biggive-biography-card": LocalJSX.BiggiveBiographyCard & JSXBase.HTMLAttributes<HTMLBiggiveBiographyCardElement>;
            "biggive-boxed-content": LocalJSX.BiggiveBoxedContent & JSXBase.HTMLAttributes<HTMLBiggiveBoxedContentElement>;
            "biggive-branded-image": LocalJSX.BiggiveBrandedImage & JSXBase.HTMLAttributes<HTMLBiggiveBrandedImageElement>;
            "biggive-button": LocalJSX.BiggiveButton & JSXBase.HTMLAttributes<HTMLBiggiveButtonElement>;
            "biggive-call-to-action": LocalJSX.BiggiveCallToAction & JSXBase.HTMLAttributes<HTMLBiggiveCallToActionElement>;
            "biggive-campaign-card": LocalJSX.BiggiveCampaignCard & JSXBase.HTMLAttributes<HTMLBiggiveCampaignCardElement>;
            "biggive-campaign-card-filter-grid": LocalJSX.BiggiveCampaignCardFilterGrid & JSXBase.HTMLAttributes<HTMLBiggiveCampaignCardFilterGridElement>;
            "biggive-campaign-highlights": LocalJSX.BiggiveCampaignHighlights & JSXBase.HTMLAttributes<HTMLBiggiveCampaignHighlightsElement>;
            "biggive-container-card": LocalJSX.BiggiveContainerCard & JSXBase.HTMLAttributes<HTMLBiggiveContainerCardElement>;
            "biggive-cookie-banner": LocalJSX.BiggiveCookieBanner & JSXBase.HTMLAttributes<HTMLBiggiveCookieBannerElement>;
            /**
             * Should be contained in a `<footer/>` or similar so that the page has appropriate
             * landmarks.
             */
            "biggive-footer": LocalJSX.BiggiveFooter & JSXBase.HTMLAttributes<HTMLBiggiveFooterElement>;
            "biggive-form": LocalJSX.BiggiveForm & JSXBase.HTMLAttributes<HTMLBiggiveFormElement>;
            "biggive-form-field-select": LocalJSX.BiggiveFormFieldSelect & JSXBase.HTMLAttributes<HTMLBiggiveFormFieldSelectElement>;
            "biggive-formatted-text": LocalJSX.BiggiveFormattedText & JSXBase.HTMLAttributes<HTMLBiggiveFormattedTextElement>;
            "biggive-grid": LocalJSX.BiggiveGrid & JSXBase.HTMLAttributes<HTMLBiggiveGridElement>;
            "biggive-heading": LocalJSX.BiggiveHeading & JSXBase.HTMLAttributes<HTMLBiggiveHeadingElement>;
            /**
             * Heading banner component for use as a page header.
             * This component provides a banner with a background image, optional logo, and text content.
             * It supports different heights and customizable colors.
             */
            "biggive-heading-banner": LocalJSX.BiggiveHeadingBanner & JSXBase.HTMLAttributes<HTMLBiggiveHeadingBannerElement>;
            "biggive-hero-image": LocalJSX.BiggiveHeroImage & JSXBase.HTMLAttributes<HTMLBiggiveHeroImageElement>;
            "biggive-icon-button": LocalJSX.BiggiveIconButton & JSXBase.HTMLAttributes<HTMLBiggiveIconButtonElement>;
            "biggive-image": LocalJSX.BiggiveImage & JSXBase.HTMLAttributes<HTMLBiggiveImageElement>;
            "biggive-image-button": LocalJSX.BiggiveImageButton & JSXBase.HTMLAttributes<HTMLBiggiveImageButtonElement>;
            "biggive-image-card": LocalJSX.BiggiveImageCard & JSXBase.HTMLAttributes<HTMLBiggiveImageCardElement>;
            "biggive-image-feature": LocalJSX.BiggiveImageFeature & JSXBase.HTMLAttributes<HTMLBiggiveImageFeatureElement>;
            "biggive-main-menu": LocalJSX.BiggiveMainMenu & JSXBase.HTMLAttributes<HTMLBiggiveMainMenuElement>;
            "biggive-misc-icon": LocalJSX.BiggiveMiscIcon & JSXBase.HTMLAttributes<HTMLBiggiveMiscIconElement>;
            "biggive-nav-group": LocalJSX.BiggiveNavGroup & JSXBase.HTMLAttributes<HTMLBiggiveNavGroupElement>;
            "biggive-nav-item": LocalJSX.BiggiveNavItem & JSXBase.HTMLAttributes<HTMLBiggiveNavItemElement>;
            "biggive-page-column": LocalJSX.BiggivePageColumn & JSXBase.HTMLAttributes<HTMLBiggivePageColumnElement>;
            "biggive-page-columns": LocalJSX.BiggivePageColumns & JSXBase.HTMLAttributes<HTMLBiggivePageColumnsElement>;
            "biggive-page-section": LocalJSX.BiggivePageSection & JSXBase.HTMLAttributes<HTMLBiggivePageSectionElement>;
            "biggive-popup": LocalJSX.BiggivePopup & JSXBase.HTMLAttributes<HTMLBiggivePopupElement>;
            "biggive-progress-bar": LocalJSX.BiggiveProgressBar & JSXBase.HTMLAttributes<HTMLBiggiveProgressBarElement>;
            "biggive-quote": LocalJSX.BiggiveQuote & JSXBase.HTMLAttributes<HTMLBiggiveQuoteElement>;
            "biggive-sheet": LocalJSX.BiggiveSheet & JSXBase.HTMLAttributes<HTMLBiggiveSheetElement>;
            /**
             * Used to indicate and link to a charity's social page, or their own web site.
             */
            "biggive-social-icon": LocalJSX.BiggiveSocialIcon & JSXBase.HTMLAttributes<HTMLBiggiveSocialIconElement>;
            "biggive-tab": LocalJSX.BiggiveTab & JSXBase.HTMLAttributes<HTMLBiggiveTabElement>;
            "biggive-tabbed-content": LocalJSX.BiggiveTabbedContent & JSXBase.HTMLAttributes<HTMLBiggiveTabbedContentElement>;
            "biggive-table": LocalJSX.BiggiveTable & JSXBase.HTMLAttributes<HTMLBiggiveTableElement>;
            /**
             * Initially developed for use within the new donate stepper design. Currently has a hard-coded background
             * of $colour-grey-background, intened to appear transparent when used on a page with a matching background.
             * Please ensure input is styled as width: 100%.
             * Requires slots `label` and `input`.
             */
            "biggive-text-input": LocalJSX.BiggiveTextInput & JSXBase.HTMLAttributes<HTMLBiggiveTextInputElement>;
            "biggive-timeline": LocalJSX.BiggiveTimeline & JSXBase.HTMLAttributes<HTMLBiggiveTimelineElement>;
            "biggive-timeline-entry": LocalJSX.BiggiveTimelineEntry & JSXBase.HTMLAttributes<HTMLBiggiveTimelineEntryElement>;
            "biggive-totalizer": LocalJSX.BiggiveTotalizer & JSXBase.HTMLAttributes<HTMLBiggiveTotalizerElement>;
            "biggive-totalizer-ticker-item": LocalJSX.BiggiveTotalizerTickerItem & JSXBase.HTMLAttributes<HTMLBiggiveTotalizerTickerItemElement>;
            "biggive-video": LocalJSX.BiggiveVideo & JSXBase.HTMLAttributes<HTMLBiggiveVideoElement>;
            "biggive-video-feature": LocalJSX.BiggiveVideoFeature & JSXBase.HTMLAttributes<HTMLBiggiveVideoFeatureElement>;
            /**
             * Should be contained in a `<footer/>` or similar so that the page has appropriate
             * landmarks.
             */
            "philco-footer": LocalJSX.PhilcoFooter & JSXBase.HTMLAttributes<HTMLPhilcoFooterElement>;
            "philco-main-menu": LocalJSX.PhilcoMainMenu & JSXBase.HTMLAttributes<HTMLPhilcoMainMenuElement>;
        }
    }
}
