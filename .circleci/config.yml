version: 2.1

orbs:
  aws-s3: circleci/aws-s3@3.0.0 # 3.1.1 is broken: https://github.com/CircleCI-Public/aws-s3-orb/issues/45
  jira: circleci/jira@1.3.1

defaults: &defaults
  working_directory: ~/components
  docker:
    - image: cimg/node:16.18-browsers
      auth:
        username: $DOCKER_HUB_USERNAME
        password: $DOCKER_HUB_ACCESS_TOKEN

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
      - run: npm install
      - run: npm run build && git diff; git diff-index --quiet HEAD -- || (git status && exit 1); # Checks that npm run didn't change any files. If it did changes must be commited.
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
      - run: npm run lint
      - run: npm run test

  deploy-staging-storybook:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
      - run: npm install --quiet
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
      - run:
          name: Build components
          command: npm run build
      - run:
          name: Build Storybook
          command: npm run build-storybook
      - aws-s3/sync:
          from: src/assets
          to: 's3://tbg-staging-component-library/assets'
          arguments: |
            --acl public-read \
            --cache-control "max-age=3600"
      - aws-s3/sync:
          from: storybook-static
          to: 's3://tbg-staging-component-library'
          arguments: |
            --acl public-read \
            --cache-control "max-age=3600"

  deploy-production-storybook:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
      - run: npm install --quiet
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
      - run:
          name: Build components
          command: npm run build
      - run:
          name: Build Storybook
          command: npm run build-storybook
      - aws-s3/sync:
          from: src/assets
          to: 's3://tbg-production-component-library/assets'
          arguments: |
            --acl public-read \
            --cache-control "max-age=3600"
      - aws-s3/sync:
          from: storybook-static
          to: 's3://tbg-production-component-library'
          arguments: |
            --acl public-read \
            --cache-control "max-age=3600"

  # Publishes `@biggive/components` *and* `@biggive/components-angular` (building both on the fly).
  publish:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
      - run: ./scripts/create-version.sh
      - run: npm run build
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_PUBLISH_AUTH_TOKEN" > ~/components/.npmrc
      - run:
          name: Publish core components to npm
          command: npm publish --access=public
      - run: cd angular && npm install
      - run:
          name: Build Angular components
          command: cd angular && npm run build
      - run:
          name: Authenticate with registry in Angular components output directory
          command: echo "//registry.npmjs.org/:_authToken=$NPM_PUBLISH_AUTH_TOKEN" > ~/components/angular/dist/components/.npmrc
      - run:
          name: Publish Angular components to npm
          command: cd angular/dist/components && npm publish --access=public

workflows:
  build-and-maybe-publish:
    jobs:
      - build:
          context:
            - docker-hub-creds
            - jira
          post-steps:
            - jira/notify:
                job_type: build
                environment_type: development
      
      # Pushes to `develop` deploy a new Storybook Staging build.
      - deploy-staging-storybook:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
          context:
            - docker-hub-creds
            - ecs-deploys # Includes S3 stuff used by Donate frontend.
            - jira
          post-steps:
            - jira/notify:
                job_type: deployment
                environment_type: staging

      # Pushes to `main` publish new package versions to npm, then deploy a
      # new Storybook Production build. The latter doesn't use the former directly,
      # but we still don't want to erroneously update the Production component library
      # if the npm publish failed and apps can't use the new version.
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - main
          context:
            - docker-hub-creds
            - jira
            - npm-publish
          post-steps:
            - jira/notify:
                job_type: deployment
                environment_type: production

      - deploy-production-storybook:
          requires:
            - build
            - publish
          filters:
            branches:
              only:
                - main
          context:
            - docker-hub-creds
            - ecs-deploys # Includes S3 stuff used by Donate frontend.
            - jira
          post-steps:
            - jira/notify:
                job_type: deployment
                environment_type: production
